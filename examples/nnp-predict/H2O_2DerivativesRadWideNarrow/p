Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 62.00      3.41     3.41    90695     0.04     0.04  nnp::Derivatives::addTod4F(nnp::Derivatives const&, nnp::Derivatives const*, int*)
  9.82      3.95     0.54   776165     0.00     0.00  nnp::NeuralNetwork::calculated2EdG(double**, double**, double**) const
  9.45      4.47     0.52   229200     0.00     0.00  nnp::Derivatives::addTod3F(nnp::Derivatives const&, nnp::Derivatives const*, int*)
  8.18      4.92     0.45   501285     0.00     0.00  nnp::NeuralNetwork::calculated3EdG(double**, double**, double**, double**, double**, double**, double**) const
  3.09      5.09     0.17   368775     0.00     0.00  nnp::NeuralNetwork::calculatedEdG(double**, int) const
  2.91      5.25     0.16    90695     0.00     0.00  nnp::NeuralNetwork::calculated4EdG(double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**) const
  1.82      5.35     0.10   410435     0.00     0.00  nnp::Derivatives::operator=(nnp::Derivatives const&)
  1.45      5.43     0.08    44460     0.00     0.00  nnp::Derivatives::addTod2F(nnp::Derivatives const&, nnp::Derivatives const*, int*)
  0.36      5.45     0.02  2463540     0.00     0.00  getListPermutation(int*, int, int, int**, int&)
  0.18      5.46     0.01    14664     0.00     0.00  nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double)
  0.18      5.47     0.01    14664     0.00     0.00  nnp::Derivatives::computednRij2_6(double const*)
  0.18      5.48     0.01     8112     0.00     0.00  nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const
  0.18      5.49     0.01     7520     0.00     0.00  nnp::Derivatives::computed3Fzeta(nnp::Derivatives const&, double)
  0.18      5.50     0.01      800     0.01     0.01  nnp::Derivatives::addD3ijk(nnp::Derivatives const&, int, int, int, double)
  0.00      5.50     0.00   367475     0.00     0.01  nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int)
  0.00      5.50     0.00   159843     0.00     0.00  nnp::Derivatives::free()
  0.00      5.50     0.00    67023     0.00     0.00  nnp::Derivatives::Derivatives(int, int)
  0.00      5.50     0.00    28910     0.00     0.00  std::string const& nnp::safeFind<unsigned long, std::string>(std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > > const&, std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::key_type const&)
  0.00      5.50     0.00    28907     0.00     0.00  nnp::ElementMap::symbol(unsigned long) const
  0.00      5.50     0.00    27300     0.00     0.00  nnp::Derivatives::Derivatives(int, int) [clone .constprop.25]
  0.00      5.50     0.00    20820     0.00     0.00  nnp::CutoffFunction::dnfTANHU(double, int) const
  0.00      5.50     0.00    10869     0.00     0.00  nnp::strpr(char const*, ...)
  0.00      5.50     0.00    10764     0.00     0.00  nnp::Derivatives::computeProd(double, nnp::Derivatives&) const
  0.00      5.50     0.00    10452     0.00     0.00  nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const
  0.00      5.50     0.00    10452     0.00     0.00  nnp::Derivatives::computeProdThird(nnp::Derivatives const&, nnp::Derivatives&) const
  0.00      5.50     0.00    10452     0.00     0.00  nnp::Derivatives::computeProdFourth(nnp::Derivatives const&, nnp::Derivatives&) const
  0.00      5.50     0.00     9204     0.00     0.00  nnp::Derivatives::computed3fu(double const*, nnp::Derivatives const&)
  0.00      5.50     0.00     9204     0.00     0.00  nnp::Derivatives::computed4fu(double const*, nnp::Derivatives const&)
  0.00      5.50     0.00     9204     0.00     0.00  nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&)
  0.00      5.50     0.00     8925     0.00     0.00  void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&)
  0.00      5.50     0.00     8424     0.00     0.00  nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&)
  0.00      5.50     0.00     8112     0.00     0.00  nnp::Derivatives::computeSumFourth(double, double, nnp::Derivatives const&, nnp::Derivatives&) const
  0.00      5.50     0.00     7963     0.00     0.00  nnp::Log::addLogEntry(std::string const&)
  0.00      5.50     0.00     7651     0.00     0.00  nnp::Log::operator<<(std::string const&)
  0.00      5.50     0.00     5811     0.00     0.00  nnp::Derivatives::~Derivatives()
  0.00      5.50     0.00     4680     0.00     0.00  build9From6ik(double**, double**)
  0.00      5.50     0.00     4680     0.00     0.00  nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18]
  0.00      5.50     0.00     4400     0.00     0.00  nnp::SymmetryFunction::unscale(double) const
  0.00      5.50     0.00     4212     0.00     0.00  nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*)
  0.00      5.50     0.00     4212     0.00     0.00  nnp::Derivatives::Derivatives(int, int, double const*, double)
  0.00      5.50     0.00     3159     0.00     0.00  nnp::Derivatives::reset()
  0.00      5.50     0.00     3124     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const
  0.00      5.50     0.00     3120     0.00     0.00  nnp::Derivatives::addTod1F(nnp::Derivatives const&, nnp::Derivatives const*, int*)
  0.00      5.50     0.00     2980     0.00     0.00  new4Dtable(int)
  0.00      5.50     0.00     2537     0.00     0.00  nnp::reduce(std::string const&, std::string const&, std::string const&)
  0.00      5.50     0.00     2433     0.00     0.00  nnp::split(std::string const&, char)
  0.00      5.50     0.00     2400     0.00     0.00  build9From6ik(double***, double***)
  0.00      5.50     0.00     2301     0.00     0.00  nnp::SymmetryFunction::scale(double) const
  0.00      5.50     0.00     1872     0.00     0.00  nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, double)
  0.00      5.50     0.00     1872     0.00     0.00  nnp::Derivatives::addD2ij(nnp::Derivatives const&, int, int, double)
  0.00      5.50     0.00     1872     0.00     0.01  nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&)
  0.00      5.50     0.00     1560     0.00     0.01  nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double)
  0.00      5.50     0.00     1560     0.00     0.00  nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16]
  0.00      5.50     0.00     1560     0.00     0.00  nnp::Derivatives::computecosijk(double const*, double const*)
  0.00      5.50     0.00     1560     0.00     0.00  nnp::Derivatives::computed2Rijk()
  0.00      5.50     0.00     1560     0.00     0.00  nnp::Derivatives::computednRijk(double const*, double const*)
  0.00      5.50     0.00     1560     0.00     0.00  nnp::Derivatives::addD2ijk(nnp::Derivatives const&, int, int, int, double)
  0.00      5.50     0.00     1560     0.00     0.00  nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15]
  0.00      5.50     0.00     1560     0.00     0.01  nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const
  0.00      5.50     0.00     1443     0.00     0.00  std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const
  0.00      5.50     0.00     1308     0.00     0.00  nnp::Derivatives::Derivatives()
  0.00      5.50     0.00     1016     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::find(std::string const&) const
  0.00      5.50     0.00      984     0.00     0.00  nnp::getDerivativesR(double const*, double const&, int, int)
  0.00      5.50     0.00      960     0.00     0.00  nnp::Derivatives::addD3ij(nnp::Derivatives const&, int, int, double)
  0.00      5.50     0.00      914     0.00     0.00  nnp::pow_int(double, int)
  0.00      5.50     0.00      891     0.00     0.00  nnp::NeuralNetwork::propagateLayer(nnp::NeuralNetwork::Layer&, nnp::NeuralNetwork::Layer&)
  0.00      5.50     0.00      800     0.00     0.00  build9From6jk(double***, double***)
  0.00      5.50     0.00      780     0.00     0.01  nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*)
  0.00      5.50     0.00      780     0.00     0.01  nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*)
  0.00      5.50     0.00      780     0.00     0.01  nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double)
  0.00      5.50     0.00      780     0.00     0.03  nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&)
  0.00      5.50     0.00      780     0.00     0.02  nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&)
  0.00      5.50     0.00      780     0.00     0.03  nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const
  0.00      5.50     0.00      780     0.00     0.03  nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const
  0.00      5.50     0.00      678     0.00     0.00  std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&)
  0.00      5.50     0.00      650     0.00     0.00  std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.103]
  0.00      5.50     0.00      531     0.00     0.00  std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.107]
  0.00      5.50     0.00      508     0.00     0.00  unsigned long const& nnp::safeFind<std::string, unsigned long>(std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > > const&, std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::key_type const&)
  0.00      5.50     0.00      508     0.00     0.00  nnp::ElementMap::index(std::string const&) const
  0.00      5.50     0.00      415     0.00     0.00  void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long const&>(unsigned long const&)
  0.00      5.50     0.00      376     0.00     0.00  nnp::Derivatives::computed4Fzeta(nnp::Derivatives const&, double)
  0.00      5.50     0.00      297     0.00     0.00  nnp::NeuralNetwork::propagate()
  0.00      5.50     0.00      297     0.00     0.00  nnp::NeuralNetwork::setInput(double const* const&) const
  0.00      5.50     0.00      294     0.00     0.00  nnp::NeuralNetwork::getOutput(double*) const
  0.00      5.50     0.00      280     0.00     0.00  nnp::getDerivativesRij(double const*, double*, double (*) [6])
  0.00      5.50     0.00      270     0.00     0.00  void std::vector<nnp::Atom::Neighbor, std::allocator<nnp::Atom::Neighbor> >::_M_emplace_back_aux<nnp::Atom::Neighbor>(nnp::Atom::Neighbor&&)
  0.00      5.50     0.00      268     0.00     0.00  nnp::Atom::Neighbor::Neighbor()
  0.00      5.50     0.00      260     0.00     0.00  std::vector<nnp::Vec3D, std::allocator<nnp::Vec3D> >::_M_default_append(unsigned long)
  0.00      5.50     0.00      234     0.00     0.00  std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&)
  0.00      5.50     0.00      216     0.00     0.00  build9From6ij(double****, double****)
  0.00      5.50     0.00      189     0.00     0.00  nnp::CutoffFunction::fdfTANHU(double, double&, double&) const
  0.00      5.50     0.00      177     0.00     0.00  nnp::Atom::toPhysicalUnits(double, double)
  0.00      5.50     0.00      177     0.00     0.00  nnp::Atom::toNormalizedUnits(double, double)
  0.00      5.50     0.00      177     0.00     0.00  nnp::NeuralNetwork::calculateDEdG(double*) const
  0.00      5.50     0.00      168     0.00     0.00  nnp::SymmetryFunctionRadial::operator<(nnp::SymmetryFunction const&) const
  0.00      5.50     0.00      165     0.00     0.00  nnp::Atom::Atom()
  0.00      5.50     0.00      165     0.00     0.00  nnp::Element::updateSymmetryFunctionStatistics(nnp::Atom const&)
  0.00      5.50     0.00      165     0.00     0.00  void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::emplace_back<nnp::Atom>(nnp::Atom&&)
  0.00      5.50     0.00      165     0.00     0.00  void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::_M_emplace_back_aux<nnp::Atom>(nnp::Atom&&)
  0.00      5.50     0.00      158     0.00     0.00  void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&)
  0.00      5.50     0.00      157     0.00     0.00  nnp::CutoffFunction::setCutoffParameter(double)
  0.00      5.50     0.00      147     0.00     0.00  nnp::SymmetryFunctionGroupRadial::calculate(nnp::Atom&, bool) const
  0.00      5.50     0.00      120     0.00     0.00  build9From6ik(double****, double****)
  0.00      5.50     0.00      120     0.00     0.00  nnp::build9From6ik(double const (*) [6], double (*) [9])
  0.00      5.50     0.00      119     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*)
  0.00      5.50     0.00      119     0.00     0.00  std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*)
  0.00      5.50     0.00      118     0.00     0.00  nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const
  0.00      5.50     0.00      117     0.00    11.27  nnp::Derivatives::compute(nnp::NeuralNetwork const*)
  0.00      5.50     0.00      117     0.00     0.00  nnp::Mode::addEnergyOffset(nnp::Structure&, bool)
  0.00      5.50     0.00      117     0.00     0.00  nnp::NeuralNetwork::getNumNeurons(int) const
  0.00      5.50     0.00      117     0.00    11.27  nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const
  0.00      5.50     0.00      117     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*)
  0.00      5.50     0.00      117     0.00     0.00  std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*)
  0.00      5.50     0.00      107     0.00     0.00  nnp::CutoffFunction::setCutoffRadius(double)
  0.00      5.50     0.00      105     0.00     0.00  std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, unsigned long> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_insert_equal<std::pair<std::string, std::pair<std::string, unsigned long> > >(std::pair<std::string, std::pair<std::string, unsigned long> >&&)
  0.00      5.50     0.00      100     0.00     0.00  nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const
  0.00      5.50     0.00       98     0.00     0.00  nnp::Structure::readFromFile(std::string)
  0.00      5.50     0.00       83     0.00     0.00  void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&)
  0.00      5.50     0.00       77     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const
  0.00      5.50     0.00       73     0.00     0.00  nnp::SymmetryFunctionAngularWide::operator<(nnp::SymmetryFunction const&) const
  0.00      5.50     0.00       72     0.00     0.00  nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*)
  0.00      5.50     0.00       68     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::calculate(nnp::Atom&, bool) const
  0.00      5.50     0.00       67     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::equal_range(std::string const&) const
  0.00      5.50     0.00       65     0.00     0.00  std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&)
  0.00      5.50     0.00       64     0.00     0.00  std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)
  0.00      5.50     0.00       62     0.00     0.00  nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const
  0.00      5.50     0.00       61     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const
  0.00      5.50     0.00       61     0.00     0.00  std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator[](std::string&&)
  0.00      5.50     0.00       60     0.00     0.00  nnp::Atom::allocate(bool)
  0.00      5.50     0.00       59     0.00     0.00  nnp::Structure::toPhysicalUnits(double, double, double, double)
  0.00      5.50     0.00       59     0.00     0.00  nnp::Structure::toNormalizedUnits(double, double, double, double)
  0.00      5.50     0.00       59     0.00     0.00  nnp::Mode::calculateEnergy(nnp::Structure&) const
  0.00      5.50     0.00       59     0.00     0.00  nnp::Mode::calculateForces(nnp::Structure&) const
  0.00      5.50     0.00       59     0.00     0.00  nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const
  0.00      5.50     0.00       57     0.00     0.00  nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType)
  0.00      5.50     0.00       57     0.00     0.00  nnp::CutoffFunction::CutoffFunction()
  0.00      5.50     0.00       56     0.00     0.00  std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Mode::removeEnergyOffset(nnp::Structure&, bool)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Structure::setElementMap(nnp::ElementMap const&)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Structure::calculateNeighborList(double)
  0.00      5.50     0.00       55     0.00     0.00  nnp::Structure::reset()
  0.00      5.50     0.00       54     0.00     0.00  nnp::Prediction::readStructureFromFile(std::string const&)
  0.00      5.50     0.00       50     0.00     0.00  nnp::SymmetryFunction::setScalingType(nnp::SymmetryFunction::ScalingType, std::string, double, double)
  0.00      5.50     0.00       50     0.00     0.00  nnp::SymmetryFunction::setCutoffFunction(nnp::CutoffFunction::CutoffType, double)
  0.00      5.50     0.00       50     0.00     0.00  nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&)
  0.00      5.50     0.00       50     0.00     0.00  nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&)
  0.00      5.50     0.00       50     0.00     0.00  nnp::SymmetryFunction::scalingLine() const
  0.00      5.50     0.00       50     0.00     0.00  nnp::SymmetryFunction::getPrintFormat() const
  0.00      5.50     0.00       50     0.00     0.00  nnp::SymmetryFunctionGroup::getPrintFormatMember() const
  0.00      5.50     0.00       48     0.00     0.00  nnp::Derivatives::addD4ij(nnp::Derivatives const&, int, int, double)
  0.00      5.50     0.00       48     0.00     0.00  nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&)
  0.00      5.50     0.00       48     0.00     0.00  nnp::setSecondDerivesij(double (*) [6], int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&)
  0.00      5.50     0.00       48     0.00     0.00  nnp::CutoffFunction::fTANHU(double) const
  0.00      5.50     0.00       45     0.00     0.00  nnp::Atom::getNumNeighbors(double) const
  0.00      5.50     0.00       44     0.00     0.00  void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&)
  0.00      5.50     0.00       40     0.00     0.00  build9From6jk(double****, double****)
  0.00      5.50     0.00       40     0.00     0.00  nnp::Derivatives::addD4ijk(nnp::Derivatives const&, int, int, int, double)
  0.00      5.50     0.00       40     0.00     0.00  nnp::getDerivativesRijk(double (*) [9])
  0.00      5.50     0.00       40     0.00     0.00  nnp::setSecondDerivesijk(double (*) [9], int, int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&)
  0.00      5.50     0.00       40     0.00     0.00  nnp::getDerivativesRijRik(double const*, double const*, double*, double (*) [9])
  0.00      5.50     0.00       40     0.00     0.00  nnp::getDerivativescosijk(double const*, double const*, double*, double (*) [9])
  0.00      5.50     0.00       40     0.00     0.00  nnp::getDerivativescosijk(double const*, double const*, double, double, double*, double (*) [9])
  0.00      5.50     0.00       40     0.00     0.00  nnp::SymmetryFunctionRadial::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const
  0.00      5.50     0.00       39     0.00     0.00  nnp::Derivatives::toPhysicalUnits(double, double)
  0.00      5.50     0.00       39     0.00     0.00  nnp::Derivatives::Derivatives(nnp::Derivatives const&)
  0.00      5.50     0.00       39     0.00   140.99  nnp::Mode::computeHighDerivatives(nnp::Structure&, int, int) const
  0.00      5.50     0.00       39     0.00   140.99  nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const
  0.00      5.50     0.00       39     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::find(std::string const&) const
  0.00      5.50     0.00       36     0.00   152.74  nnp::Prediction::getHighDerivatives(int, int)
  0.00      5.50     0.00       29     0.00     0.00  std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, std::string> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::pair<std::string, std::string> > >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&)
  0.00      5.50     0.00       28     0.00     0.00  void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long>(unsigned long&&)
  0.00      5.50     0.00       26     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*)
  0.00      5.50     0.00       24     0.00     0.00  nnp::SymmetryFunctionRadial::setParameters(std::string const&)
  0.00      5.50     0.00       24     0.00     0.00  nnp::SymmetryFunctionRadial::changeLengthUnit(double)
  0.00      5.50     0.00       24     0.00     0.00  nnp::SymmetryFunctionRadial::SymmetryFunctionRadial(nnp::ElementMap const&)
  0.00      5.50     0.00       24     0.00     0.00  nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial()
  0.00      5.50     0.00       24     0.00     0.00  nnp::SymmetryFunctionRadial::parameterLine() const
  0.00      5.50     0.00       20     0.00     0.00  nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&)
  0.00      5.50     0.00       20     0.00     0.00  nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&)
  0.00      5.50     0.00       20     0.00     0.00  nnp::getDerivativesfc(double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&)
  0.00      5.50     0.00       20     0.00     0.00  nnp::getDerivativesfc(double const*, double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&)
  0.00      5.50     0.00       20     0.00     0.00  nnp::getDerivativesRij2pRik2(double const*, double const*, double, double*, double (*) [9])
  0.00      5.50     0.00       20     0.00     0.00  nnp::getDerivativesRij2pRik2pRjk2(double const*, double const*, double const*, double, double*, double (*) [9])
  0.00      5.50     0.00       20     0.00     0.00  nnp::SymmetryFunctionAngularWide::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const
  0.00      5.50     0.00       20     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const
  0.00      5.50     0.00       18     0.00     0.00  nnp::Prediction::predict()
  0.00      5.50     0.00       16     0.00     0.00  void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)
  0.00      5.50     0.00       15     0.00     0.00  nnp::Settings::keywordExists(std::string const&) const
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularWide::setParameters(std::string const&)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularWide::changeLengthUnit(double)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularWide::SymmetryFunctionAngularWide(nnp::ElementMap const&)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide()
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::changeLengthUnit(double)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::SymmetryFunctionAngularNarrow(nnp::ElementMap const&)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow()
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*)
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularWide::parameterLine() const
  0.00      5.50     0.00       13     0.00     0.00  nnp::SymmetryFunctionAngularNarrow::parameterLine() const
  0.00      5.50     0.00       12     0.00     0.00  void std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionRadial const* const&>(nnp::SymmetryFunctionRadial const* const&)
  0.00      5.50     0.00       12     0.00     0.00  void std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> >::_M_emplace_back_aux<nnp::SymmetryFunction*>(nnp::SymmetryFunction*&&)
  0.00      5.50     0.00       11     0.00     0.00  nnp::Settings::operator[](std::string const&) const
  0.00      5.50     0.00        9     0.00     0.00  nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&)
  0.00      5.50     0.00        8     0.00     0.00  nnp::ElementMap::atomicNumber(std::string const&)
  0.00      5.50     0.00        8     0.00     0.00  nnp::NeuralNetwork::allocateLayer(nnp::NeuralNetwork::Layer&, int, int, nnp::NeuralNetwork::ActivationFunction)
  0.00      5.50     0.00        8     0.00     0.00  void std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularWide const* const&>(nnp::SymmetryFunctionAngularWide const* const&)
  0.00      5.50     0.00        8     0.00     0.00  std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool)
  0.00      5.50     0.00        7     0.00     0.00  nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&)
  0.00      5.50     0.00        7     0.00     0.00  nnp::SymmetryFunctionGroup::getPrintFormatCommon() const
  0.00      5.50     0.00        7     0.00     0.00  void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag)
  0.00      5.50     0.00        6     0.00     0.00  void std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> >::_M_emplace_back_aux<nnp::SymmetryFunctionGroup*>(nnp::SymmetryFunctionGroup*&&)
  0.00      5.50     0.00        5     0.00     0.00  nnp::Element::~Element()
  0.00      5.50     0.00        5     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::string> >*)
  0.00      5.50     0.00        5     0.00     0.00  std::_Rb_tree<unsigned long, std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container>, std::_Select1st<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >*)
  0.00      5.50     0.00        4     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::operator<(nnp::SymmetryFunctionGroup const&) const
  0.00      5.50     0.00        4     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::operator<(nnp::SymmetryFunctionGroup const&) const
  0.00      5.50     0.00        3     0.00     0.00  nnp::SymmetryFunctionGroupRadial::sortMembers()
  0.00      5.50     0.00        3     0.00     0.00  nnp::SymmetryFunctionGroupRadial::setScalingFactors()
  0.00      5.50     0.00        3     0.00     0.00  nnp::SymmetryFunctionGroupRadial::SymmetryFunctionGroupRadial(nnp::ElementMap const&)
  0.00      5.50     0.00        3     0.00     0.00  nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial()
  0.00      5.50     0.00        3     0.00     0.00  nnp::DFTD3::DFTD3()
  0.00      5.50     0.00        3     0.00     0.01  nnp::NeuralNetwork::calculatedEdG(double*) const
  0.00      5.50     0.00        3     0.00     0.47  nnp::NeuralNetwork::calculateD2EdG2(double**) const
  0.00      5.50     0.00        3     0.00     0.00  nnp::SymmetryFunctionGroupRadial::parameterLines() const
  0.00      5.50     0.00        3     0.00     0.00  std::vector<std::string, std::allocator<std::string> >::~vector()
  0.00      5.50     0.00        3     0.00     0.00  void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.151]
  0.00      5.50     0.00        3     0.00     0.00  void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.139]
  0.00      5.50     0.00        2     0.00     0.00  nnp::NeuralNetwork::setConnections(double const* const&)
  0.00      5.50     0.00        2     0.00     0.00  nnp::NeuralNetwork::setNormalizeNeurons(bool)
  0.00      5.50     0.00        2     0.00     0.00  nnp::NeuralNetwork::NeuralNetwork(int, int const* const&, nnp::NeuralNetwork::ActivationFunction const* const&)
  0.00      5.50     0.00        2     0.00     0.00  nnp::NeuralNetwork::~NeuralNetwork()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionStatistics::SymmetryFunctionStatistics()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::sortMembers()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::setScalingFactors()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::SymmetryFunctionGroupAngularWide(nnp::ElementMap const&)
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::sortMembers()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::setScalingFactors()
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::SymmetryFunctionGroupAngularNarrow(nnp::ElementMap const&)
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow()
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::setCutoffFunction(nnp::CutoffFunction::CutoffType, double)
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::sortSymmetryFunctions()
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::setupSymmetryFunctionGroups()
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::changeLengthUnitSymmetryFunctions(double)
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::Element(nnp::Element const&)
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::Element(unsigned long, nnp::ElementMap const&)
  0.00      5.50     0.00        2     0.00     0.00  nnp::NeuralNetwork::info() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupRadial::operator<(nnp::SymmetryFunctionGroup const&) const
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularWide::parameterLines() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::getMinNeighbors() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::getMaxCutoffRadius() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::getMinCutoffRadius() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::infoSymmetryFunctionGroups() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::infoSymmetryFunctionScaling() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Element::infoSymmetryFunctionParameters() const
  0.00      5.50     0.00        2     0.00     0.00  nnp::Settings::getValues(std::string const&) const
  0.00      5.50     0.00        2     0.00     0.00  void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&)
  0.00      5.50     0.00        2     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_get_insert_unique_pos(std::string const&)
  0.00      5.50     0.00        2     0.00     0.00  std::_Rb_tree_iterator<std::pair<std::string const, unsigned long> > std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, unsigned long> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&)
  0.00      5.50     0.00        2     0.00     0.00  std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::string> >, unsigned long const&)
  0.00      5.50     0.00        2     0.00     0.00  void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.197]
  0.00      5.50     0.00        2     0.00     0.00  void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.197]
  0.00      5.50     0.00        2     0.00     0.00  void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168]
  0.00      5.50     0.00        2     0.00     0.00  void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153]
  0.00      5.50     0.00        2     0.00     0.00  void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.185]
  0.00      5.50     0.00        2     0.00     0.00  void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.185]
  0.00      5.50     0.00        2     0.00     0.00  void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156]
  0.00      5.50     0.00        2     0.00     0.00  void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.141]
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z22createKnownKeywordsMapv
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z6timingRdS_
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp10ElementMap13knownElementsE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp10PredictionC2Ev
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp10new1DtableEi
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp11DerivativesC2Ev
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp13NeuralNetworkC2EiRKPKiRKPKNS0_18ActivationFunctionE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp16SymmetryFunction11sfinfoWidthE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp21SymmetryFunctionGroup11printFormatE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp22SymmetryFunctionRadialC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp27SymmetryFunctionAngularWideC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp27SymmetryFunctionGroupRadialC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp29SymmetryFunctionAngularNarrowC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp30SymmetryFunctionWeightedRadialC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp31SymmetryFunctionWeightedAngularC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp32SymmetryFunctionGroupAngularWideC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp34SymmetryFunctionGroupAngularNarrowC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp35SymmetryFunctionGroupWeightedRadialC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp36SymmetryFunctionGroupWeightedAngularC2ERKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp3LogC2Ev
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp4ModeC2Ev
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp5DFTD3C2Ev
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp7ElementC2EmRKNS_10ElementMapE
  0.00      5.50     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3nnp9StructureC2Ev
  0.00      5.50     0.00        1     0.00     0.00  nnp::ElementMap::registerElements(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  nnp::new3Dtable(int)
  0.00      5.50     0.00        1     0.00     0.00  nnp::new4Dtable(int)
  0.00      5.50     0.00        1     0.00     0.00  nnp::toPhysicalUnits(double*, unsigned long, double, double)
  0.00      5.50     0.00        1     0.00     0.00  nnp::Log::Log()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::initialize()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupDFTD3()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupCutoff()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupGeneric()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupElements()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupElementMap()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::loadSettingsFile(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupNeuralNetwork()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupNormalization()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupSymmetryFunctions()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupNeuralNetworkWeights(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupSymmetryFunctionGroups()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::setupSymmetryFunctionScaling(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  nnp::Mode::Mode()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Settings::parseLines()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Settings::sanityCheck()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Settings::loadFile(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  nnp::Settings::readFile()
  0.00      5.50     0.00        1     0.00     0.00  nnp::Structure::Structure()
  0.00      5.50     0.00        1     0.00     1.45  nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const
  0.00      5.50     0.00        1     0.00     0.00  nnp::Settings::info() const
  0.00      5.50     0.00        1     0.00     0.00  std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >::~vector()
  0.00      5.50     0.00        1     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, unsigned long> > >*)
  0.00      5.50     0.00        1     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_get_insert_unique_pos(std::string const&)
  0.00      5.50     0.00        1     0.00     0.00  void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)) [clone .constprop.93]
  0.00      5.50     0.00        1     0.00     0.00  void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)) [clone .constprop.81]

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.18% of 5.50 seconds

index % time    self  children    called     name
                0.00    2.75      18/36          getNumericFourth(nnp::Prediction&, double) [7]
                0.00    2.75      18/36          getNumericThird(nnp::Prediction&, double) [6]
[1]    100.0    0.00    5.50      36         nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    5.50      39/39          nnp::Mode::computeHighDerivatives(nnp::Structure&, int, int) const [2]
                0.00    0.00      39/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00      78/117         nnp::Mode::addEnergyOffset(nnp::Structure&, bool) [130]
                0.00    0.00      39/118         nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const [129]
                0.00    0.00      39/59          nnp::Mode::calculateEnergy(nnp::Structure&) const [152]
                0.00    0.00      39/59          nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
                0.00    0.00      39/1308        nnp::Derivatives::Derivatives() [90]
                0.00    0.00      39/59          nnp::Mode::calculateForces(nnp::Structure&) const [153]
                0.00    0.00      39/159843      nnp::Derivatives::free() [54]
                0.00    0.00      39/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00      39/39          nnp::Derivatives::toPhysicalUnits(double, double) [187]
                0.00    0.00      39/59          nnp::Structure::toPhysicalUnits(double, double, double, double) [150]
                0.00    0.00      39/59          nnp::Structure::toNormalizedUnits(double, double, double, double) [151]
                0.00    0.00      36/55          nnp::Structure::calculateNeighborList(double) [163]
                0.00    0.00      36/55          nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool) [159]
-----------------------------------------------
                0.00    5.50      39/39          nnp::Prediction::getHighDerivatives(int, int) [1]
[2]    100.0    0.00    5.50      39         nnp::Mode::computeHighDerivatives(nnp::Structure&, int, int) const [2]
                0.00    5.50      39/39          nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
-----------------------------------------------
                0.00    5.50      39/39          nnp::Mode::computeHighDerivatives(nnp::Structure&, int, int) const [2]
[3]    100.0    0.00    5.50      39         nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
                0.00    4.03  367475/367475      nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [4]
                0.00    1.32     117/117         nnp::Derivatives::compute(nnp::NeuralNetwork const*) [8]
                0.09    0.00  368744/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.03     780/780         nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.02     780/780         nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
                0.00    0.01    1560/1560        nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
                0.00    0.00    2616/159843      nnp::Derivatives::free() [54]
                0.00    0.00    2616/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00    1347/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1269/1308        nnp::Derivatives::Derivatives() [90]
                0.00    0.00     117/297         nnp::NeuralNetwork::setInput(double const* const&) const [105]
                0.00    0.00     117/297         nnp::NeuralNetwork::propagate() [104]
                0.00    0.00      39/3159        nnp::Derivatives::reset() [76]
                0.00    0.00      39/39          nnp::Derivatives::Derivatives(nnp::Derivatives const&) [188]
-----------------------------------------------
                0.00    4.03  367475/367475      nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[4]     73.3    0.00    4.03  367475         nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [4]
                3.41    0.01   90695/90695       nnp::Derivatives::addTod4F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [5]
                0.52    0.01  229200/229200      nnp::Derivatives::addTod3F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [11]
                0.08    0.00   44460/44460       nnp::Derivatives::addTod2F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [16]
                0.00    0.00    3120/3120        nnp::Derivatives::addTod1F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [78]
-----------------------------------------------
                3.41    0.01   90695/90695       nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [4]
[5]     62.2    3.41    0.01   90695         nnp::Derivatives::addTod4F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [5]
                0.01    0.00 1088340/2463540     getListPermutation(int*, int, int, int**, int&) [21]
-----------------------------------------------
                                                 <spontaneous>
[6]     50.0    0.00    2.75                 getNumericThird(nnp::Prediction&, double) [6]
                0.00    2.75      18/36          nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00      18/54          nnp::Prediction::readStructureFromFile(std::string const&) [165]
                0.00    0.00      18/159843      nnp::Derivatives::free() [54]
                0.00    0.00      18/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00       1/1           nnp::new3Dtable(int) [314]
-----------------------------------------------
                                                 <spontaneous>
[7]     50.0    0.00    2.75                 getNumericFourth(nnp::Prediction&, double) [7]
                0.00    2.75      18/36          nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00      18/54          nnp::Prediction::readStructureFromFile(std::string const&) [165]
                0.00    0.00      18/159843      nnp::Derivatives::free() [54]
                0.00    0.00      18/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00       1/1           nnp::new4Dtable(int) [315]
-----------------------------------------------
                0.00    1.32     117/117         nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[8]     24.0    0.00    1.32     117         nnp::Derivatives::compute(nnp::NeuralNetwork const*) [8]
                0.00    1.32     117/117         nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [9]
                0.00    0.00     117/117         nnp::NeuralNetwork::getNumNeurons(int) const [131]
                0.00    0.00     117/294         nnp::NeuralNetwork::getOutput(double*) const [106]
-----------------------------------------------
                0.00    1.32     117/117         nnp::Derivatives::compute(nnp::NeuralNetwork const*) [8]
[9]     24.0    0.00    1.32     117         nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [9]
                0.54    0.00  774945/776165      nnp::NeuralNetwork::calculated2EdG(double**, double**, double**) const [10]
                0.45    0.00  501285/501285      nnp::NeuralNetwork::calculated3EdG(double**, double**, double**, double**, double**, double**, double**) const [12]
                0.17    0.00  367475/368775      nnp::NeuralNetwork::calculatedEdG(double**, int) const [13]
                0.16    0.00   90695/90695       nnp::NeuralNetwork::calculated4EdG(double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**) const [14]
-----------------------------------------------
                0.00    0.00    1220/776165      nnp::NeuralNetwork::calculateD2EdG2(double**) const [41]
                0.54    0.00  774945/776165      nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [9]
[10]     9.8    0.54    0.00  776165         nnp::NeuralNetwork::calculated2EdG(double**, double**, double**) const [10]
-----------------------------------------------
                0.52    0.01  229200/229200      nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [4]
[11]     9.7    0.52    0.01  229200         nnp::Derivatives::addTod3F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [11]
                0.01    0.00 1375200/2463540     getListPermutation(int*, int, int, int**, int&) [21]
-----------------------------------------------
                0.45    0.00  501285/501285      nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [9]
[12]     8.2    0.45    0.00  501285         nnp::NeuralNetwork::calculated3EdG(double**, double**, double**, double**, double**, double**, double**) const [12]
-----------------------------------------------
                0.00    0.00      80/368775      nnp::NeuralNetwork::calculatedEdG(double*) const [42]
                0.00    0.00    1220/368775      nnp::NeuralNetwork::calculateD2EdG2(double**) const [41]
                0.17    0.00  367475/368775      nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [9]
[13]     3.1    0.17    0.00  368775         nnp::NeuralNetwork::calculatedEdG(double**, int) const [13]
-----------------------------------------------
                0.16    0.00   90695/90695       nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [9]
[14]     2.9    0.16    0.00   90695         nnp::NeuralNetwork::calculated4EdG(double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**) const [14]
-----------------------------------------------
                0.00    0.00      39/410435      nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00     780/410435      nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00     780/410435      nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00    1560/410435      nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/410435      nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    1560/410435      nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.00    3120/410435      nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    3744/410435      nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    3900/410435      nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00    4212/410435      nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00    5772/410435      nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00   14664/410435      nnp::Derivatives::computednRij2_6(double const*) [24]
                0.09    0.00  368744/410435      nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[15]     1.8    0.10    0.00  410435         nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00   21744/159843      nnp::Derivatives::free() [54]
                0.00    0.00     559/2980        new4Dtable(int) [79]
-----------------------------------------------
                0.08    0.00   44460/44460       nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [4]
[16]     1.5    0.08    0.00   44460         nnp::Derivatives::addTod2F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [16]
-----------------------------------------------
                0.00    0.03     780/780         nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[17]     0.5    0.00    0.03     780         nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.02     780/780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.01     780/1560        nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double) [31]
                0.00    0.00     780/3159        nnp::Derivatives::reset() [76]
                0.00    0.00     780/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00     780/159843      nnp::Derivatives::free() [54]
                0.00    0.00     780/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00      20/40          nnp::Derivatives::addD4ijk(nnp::Derivatives const&, int, int, int, double) [180]
-----------------------------------------------
                0.00    0.02     780/780         nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
[18]     0.4    0.00    0.02     780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.01     780/780         nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.01     780/780         nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00     780/1560        nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00     780/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00    3900/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    5460/159843      nnp::Derivatives::free() [54]
                0.00    0.00    4680/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1560/10764       nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [61]
                0.00    0.00    1560/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
                0.00    0.00     780/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00     780/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
-----------------------------------------------
                0.00    0.00     780/14664       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00     780/14664       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    1560/14664       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00    1560/14664       nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/14664       nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    4212/14664       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    4212/14664       nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
[19]     0.4    0.01    0.01   14664         nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.01    0.00    7520/7520        nnp::Derivatives::computed3Fzeta(nnp::Derivatives const&, double) [30]
                0.00    0.00    5772/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00   11544/159843      nnp::Derivatives::free() [54]
                0.00    0.00    5772/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00     376/376         nnp::Derivatives::computed4Fzeta(nnp::Derivatives const&, double) [103]
-----------------------------------------------
                0.00    0.02     780/780         nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[20]     0.4    0.00    0.02     780         nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
                0.00    0.02     780/780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.01     780/1560        nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double) [31]
                0.00    0.00     780/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00     780/3159        nnp::Derivatives::reset() [76]
                0.00    0.00     780/159843      nnp::Derivatives::free() [54]
                0.00    0.00     780/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00      20/40          nnp::Derivatives::addD4ijk(nnp::Derivatives const&, int, int, int, double) [180]
-----------------------------------------------
                0.01    0.00 1088340/2463540     nnp::Derivatives::addTod4F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [5]
                0.01    0.00 1375200/2463540     nnp::Derivatives::addTod3F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [11]
[21]     0.4    0.02    0.00 2463540         getListPermutation(int*, int, int, int**, int&) [21]
-----------------------------------------------
                0.00    0.00     780/4212        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.01    1560/4212        nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.01    1872/4212        nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
[22]     0.3    0.00    0.02    4212         nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00    4212/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.01    0.00    4212/8112        nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [29]
                0.00    0.00    4212/14664       nnp::Derivatives::computednRij2_6(double const*) [24]
                0.00    0.00    4212/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00   21060/159843      nnp::Derivatives::free() [54]
                0.00    0.00    8424/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    8424/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    4212/8424        nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [69]
                0.00    0.00    4212/10764       nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [61]
-----------------------------------------------
                0.00    0.02     780/780         nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
[23]     0.3    0.00    0.02     780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00     780/780         nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00     780/4212        nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00     780/1560        nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00     780/1560        nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00     780/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00     780/8112        nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [29]
                0.00    0.00    3120/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    9360/159843      nnp::Derivatives::free() [54]
                0.00    0.00    5460/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    2340/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    1560/10764       nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [61]
                0.00    0.00    1560/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
                0.00    0.00     780/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
-----------------------------------------------
                0.00    0.00    1560/14664       nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    4212/14664       nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00    4212/14664       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    4680/14664       nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
[24]     0.2    0.01    0.00   14664         nnp::Derivatives::computednRij2_6(double const*) [24]
                0.00    0.00   14664/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00   29328/159843      nnp::Derivatives::free() [54]
                0.00    0.00   14664/67023       nnp::Derivatives::Derivatives(int, int) [55]
-----------------------------------------------
                0.00    0.01    1872/1872        nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
[25]     0.2    0.00    0.01    1872         nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.01    1872/4212        nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00    1872/4212        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    3744/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    9360/159843      nnp::Derivatives::free() [54]
                0.00    0.00    3744/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    3744/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1872/10764       nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [61]
                0.00    0.00    1872/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
                0.00    0.00    1872/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
-----------------------------------------------
                0.00    0.01    1560/1560        nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[26]     0.2    0.00    0.01    1560         nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
                0.00    0.01    1872/1872        nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    1872/1872        nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, double) [84]
                0.00    0.00    1560/3159        nnp::Derivatives::reset() [76]
                0.00    0.00    1560/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1560/159843      nnp::Derivatives::free() [54]
                0.00    0.00    1560/5811        nnp::Derivatives::~Derivatives() [73]
                0.00    0.00      48/48          nnp::Derivatives::addD4ij(nnp::Derivatives const&, int, int, double) [173]
-----------------------------------------------
                0.00    0.01     780/780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
[27]     0.2    0.00    0.01     780         nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.01    1560/4212        nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00     780/1560        nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/8112        nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [29]
                0.00    0.00    1560/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    3900/159843      nnp::Derivatives::free() [54]
                0.00    0.00    1560/67023       nnp::Derivatives::Derivatives(int, int) [55]
-----------------------------------------------
                0.00    0.00     780/4212        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00    1560/4212        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00    1872/4212        nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
[28]     0.2    0.00    0.01    4212         nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    4212/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00    4212/14664       nnp::Derivatives::computednRij2_6(double const*) [24]
                0.00    0.00   14904/20820       nnp::CutoffFunction::dnfTANHU(double, int) const [59]
                0.00    0.00   12636/159843      nnp::Derivatives::free() [54]
                0.00    0.00    4212/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    4212/8424        nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [69]
                0.00    0.00    4212/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    4212/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
-----------------------------------------------
                0.00    0.00     780/8112        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    1560/8112        nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/8112        nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.01    0.00    4212/8112        nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
[29]     0.2    0.01    0.00    8112         nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [29]
                0.00    0.00    8112/8112        nnp::Derivatives::computeSumFourth(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [70]
-----------------------------------------------
                0.01    0.00    7520/7520        nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
[30]     0.2    0.01    0.00    7520         nnp::Derivatives::computed3Fzeta(nnp::Derivatives const&, double) [30]
-----------------------------------------------
                0.00    0.01     780/1560        nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.01     780/1560        nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
[31]     0.2    0.00    0.01    1560         nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double) [31]
                0.01    0.00     800/800         nnp::Derivatives::addD3ijk(nnp::Derivatives const&, int, int, int, double) [32]
                0.00    0.00    1560/1560        nnp::Derivatives::addD2ijk(nnp::Derivatives const&, int, int, int, double) [88]
-----------------------------------------------
                0.01    0.00     800/800         nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double) [31]
[32]     0.2    0.01    0.00     800         nnp::Derivatives::addD3ijk(nnp::Derivatives const&, int, int, int, double) [32]
-----------------------------------------------
                0.00    0.00     780/1560        nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.00     780/1560        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
[33]     0.1    0.00    0.01    1560         nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00    1560/8112        nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [29]
                0.00    0.00    1560/4680        nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
                0.00    0.00    1560/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    6240/159843      nnp::Derivatives::free() [54]
                0.00    0.00    3120/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1560/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    1560/10764       nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [61]
-----------------------------------------------
                0.00    0.01     780/780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
[34]     0.1    0.00    0.01     780         nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00    1560/4212        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00     780/1560        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00     780/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    3900/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    3900/159843      nnp::Derivatives::free() [54]
                0.00    0.00    1560/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
-----------------------------------------------
                0.00    0.00     780/1560        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00     780/1560        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
[35]     0.1    0.00    0.01    1560         nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    1560/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00    1560/14664       nnp::Derivatives::computednRij2_6(double const*) [24]
                0.00    0.00    1560/4680        nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
                0.00    0.00    1560/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    9360/159843      nnp::Derivatives::free() [54]
                0.00    0.00    3120/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    3120/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
                0.00    0.00    1560/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    1560/1560        nnp::Derivatives::computednRijk(double const*, double const*) [87]
                0.00    0.00      40/216         build9From6ij(double****, double****) [112]
-----------------------------------------------
                0.00    0.00    1560/4680        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00    1560/4680        nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/4680        nnp::Derivatives::computecosijk(double const*, double const*) [35]
[36]     0.1    0.00    0.00    4680         nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
                0.00    0.00    4680/14664       nnp::Derivatives::computednRij2_6(double const*) [24]
                0.00    0.00    4680/27300       nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    4680/4680        build9From6ik(double**, double**) [74]
                0.00    0.00    4680/159843      nnp::Derivatives::free() [54]
                0.00    0.00    2400/2400        build9From6ik(double***, double***) [82]
                0.00    0.00     120/120         build9From6ik(double****, double****) [125]
-----------------------------------------------
                0.00    0.00     780/780         nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
[37]     0.1    0.00    0.00     780         nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00     780/4212        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00     780/1560        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00     780/410435      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00    2340/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    2340/159843      nnp::Derivatives::free() [54]
                0.00    0.00     780/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
-----------------------------------------------
                0.00    0.00     780/1560        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00     780/1560        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
[38]     0.1    0.00    0.00    1560         nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00    1560/14664       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00    1560/4680        nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
                0.00    0.00    5520/20820       nnp::CutoffFunction::dnfTANHU(double, int) const [59]
                0.00    0.00    3120/159843      nnp::Derivatives::free() [54]
                0.00    0.00    1560/67023       nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1560/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::getHessian() [40]
[39]     0.0    0.00    0.00       1         nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
                0.00    0.00       3/3           nnp::NeuralNetwork::calculateD2EdG2(double**) const [41]
                0.00    0.00       3/3           nnp::NeuralNetwork::calculatedEdG(double*) const [42]
                0.00    0.00      40/40          nnp::SymmetryFunctionRadial::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [186]
                0.00    0.00      20/20          nnp::SymmetryFunctionAngularWide::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [204]
                0.00    0.00      20/20          nnp::SymmetryFunctionAngularNarrow::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [205]
                0.00    0.00       3/297         nnp::NeuralNetwork::setInput(double const* const&) const [105]
                0.00    0.00       3/297         nnp::NeuralNetwork::propagate() [104]
                0.00    0.00       1/1           std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >::~vector() [338]
-----------------------------------------------
                                                 <spontaneous>
[40]     0.0    0.00    0.00                 nnp::Prediction::getHessian() [40]
                0.00    0.00       1/1           nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
                0.00    0.00       2/117         nnp::Mode::addEnergyOffset(nnp::Structure&, bool) [130]
                0.00    0.00       1/59          nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
                0.00    0.00       1/59          nnp::Mode::calculateForces(nnp::Structure&) const [153]
                0.00    0.00       1/118         nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const [129]
                0.00    0.00       1/59          nnp::Mode::calculateEnergy(nnp::Structure&) const [152]
                0.00    0.00       1/1           nnp::toPhysicalUnits(double*, unsigned long, double, double) [316]
                0.00    0.00       1/59          nnp::Structure::toPhysicalUnits(double, double, double, double) [150]
                0.00    0.00       1/59          nnp::Structure::toNormalizedUnits(double, double, double, double) [151]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
[41]     0.0    0.00    0.00       3         nnp::NeuralNetwork::calculateD2EdG2(double**) const [41]
                0.00    0.00    1220/776165      nnp::NeuralNetwork::calculated2EdG(double**, double**, double**) const [10]
                0.00    0.00    1220/368775      nnp::NeuralNetwork::calculatedEdG(double**, int) const [13]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
[42]     0.0    0.00    0.00       3         nnp::NeuralNetwork::calculatedEdG(double*) const [42]
                0.00    0.00      80/368775      nnp::NeuralNetwork::calculatedEdG(double**, int) const [13]
-----------------------------------------------
                0.00    0.00      18/159843      getNumericFourth(nnp::Prediction&, double) [7]
                0.00    0.00      18/159843      getNumericThird(nnp::Prediction&, double) [6]
                0.00    0.00      39/159843      nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00     780/159843      nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.00     780/159843      nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
                0.00    0.00    1560/159843      nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
                0.00    0.00    2340/159843      nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00    2616/159843      nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
                0.00    0.00    3120/159843      nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00    3900/159843      nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00    3900/159843      nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.00    4680/159843      nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
                0.00    0.00    5460/159843      nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00    6240/159843      nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    9360/159843      nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    9360/159843      nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    9360/159843      nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00   11544/159843      nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00   12636/159843      nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00   21060/159843      nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00   21744/159843      nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00   29328/159843      nnp::Derivatives::computednRij2_6(double const*) [24]
[54]     0.0    0.00    0.00  159843         nnp::Derivatives::free() [54]
-----------------------------------------------
                0.00    0.00     780/67023       nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.00     780/67023       nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
                0.00    0.00    1347/67023       nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
                0.00    0.00    1560/67023       nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
                0.00    0.00    1560/67023       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00    1560/67023       nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [27]
                0.00    0.00    2340/67023       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00    3120/67023       nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    3120/67023       nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    3744/67023       nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    3900/67023       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00    4212/67023       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    4680/67023       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00    5460/67023       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    5772/67023       nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
                0.00    0.00    8424/67023       nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
                0.00    0.00   14664/67023       nnp::Derivatives::computednRij2_6(double const*) [24]
[55]     0.0    0.00    0.00   67023         nnp::Derivatives::Derivatives(int, int) [55]
                0.00    0.00    1720/2980        new4Dtable(int) [79]
-----------------------------------------------
                0.00    0.00   28910/28910       nnp::ElementMap::symbol(unsigned long) const [57]
[56]     0.0    0.00    0.00   28910         std::string const& nnp::safeFind<unsigned long, std::string>(std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > > const&, std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::key_type const&) [56]
-----------------------------------------------
                0.00    0.00       4/28907       nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
                0.00    0.00       4/28907       nnp::Mode::setupElementMap() [323]
                0.00    0.00       6/28907       nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00       6/28907       nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
                0.00    0.00       6/28907       nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
                0.00    0.00      39/28907       nnp::SymmetryFunctionAngularNarrow::parameterLine() const [219]
                0.00    0.00      39/28907       nnp::SymmetryFunctionAngularWide::parameterLine() const [218]
                0.00    0.00      48/28907       nnp::SymmetryFunctionRadial::parameterLine() const [197]
                0.00    0.00     162/28907       compareAnalytic1Numeric(nnp::Prediction&, double*, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >) [347]
                0.00    0.00     162/28907       compareAnalytic1Analytic2(nnp::Prediction&, double*, nnp::Derivatives&) [348]
                0.00    0.00    2187/28907       compareAnalyticNumericThird(nnp::Prediction&, double***, nnp::Derivatives&) [349]
                0.00    0.00   26244/28907       compareAnalyticNumericFourth(nnp::Prediction&, double****, nnp::Derivatives&) [350]
[57]     0.0    0.00    0.00   28907         nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00   28910/28910       std::string const& nnp::safeFind<unsigned long, std::string>(std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > > const&, std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::key_type const&) [56]
-----------------------------------------------
                0.00    0.00     780/27300       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00    1560/27300       nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/27300       nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00    2340/27300       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    3744/27300       nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    4212/27300       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    4680/27300       nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
                0.00    0.00    8424/27300       nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
[58]     0.0    0.00    0.00   27300         nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00     700/2980        new4Dtable(int) [79]
-----------------------------------------------
                0.00    0.00      96/20820       nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&) [174]
                0.00    0.00     300/20820       nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const [136]
                0.00    0.00    5520/20820       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00   14904/20820       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
[59]     0.0    0.00    0.00   20820         nnp::CutoffFunction::dnfTANHU(double, int) const [59]
-----------------------------------------------
                0.00    0.00       1/10869       nnp::Mode::initialize() [318]
                0.00    0.00       1/10869       nnp::Settings::parseLines() [332]
                0.00    0.00       2/10869       nnp::Mode::setupCutoff() [320]
                0.00    0.00       2/10869       nnp::Mode::setupSymmetryFunctionGroups() [329]
                0.00    0.00       2/10869       nnp::Settings::readFile() [335]
                0.00    0.00       3/10869       nnp::Mode::setupElementMap() [323]
                0.00    0.00       3/10869       nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00       3/10869       nnp::Mode::setupElements() [322]
                0.00    0.00       4/10869       nnp::Mode::setupNormalization() [326]
                0.00    0.00       4/10869       nnp::Mode::setupSymmetryFunctionStatistics(bool, bool, bool, bool) [509]
                0.00    0.00       5/10869       nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00       5/10869       nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
                0.00    0.00       6/10869       nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00      13/10869       nnp::SymmetryFunctionAngularNarrow::parameterLine() const [219]
                0.00    0.00      13/10869       nnp::SymmetryFunctionAngularWide::parameterLine() const [218]
                0.00    0.00      15/10869       nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00      15/10869       nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
                0.00    0.00      24/10869       nnp::SymmetryFunctionRadial::parameterLine() const [197]
                0.00    0.00      27/10869       nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
                0.00    0.00      50/10869       nnp::SymmetryFunction::scalingLine() const [170]
                0.00    0.00      85/10869       compareAnalytic1Numeric(nnp::Prediction&, double*, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >) [347]
                0.00    0.00      85/10869       compareAnalytic1Analytic2(nnp::Prediction&, double*, nnp::Derivatives&) [348]
                0.00    0.00     178/10869       nnp::NeuralNetwork::info() const [265]
                0.00    0.00     733/10869       compareAnalyticNumericThird(nnp::Prediction&, double***, nnp::Derivatives&) [349]
                0.00    0.00    3025/10869       nnp::Element::updateSymmetryFunctionStatistics(nnp::Atom const&) [119]
                0.00    0.00    6565/10869       compareAnalyticNumericFourth(nnp::Prediction&, double****, nnp::Derivatives&) [350]
[60]     0.0    0.00    0.00   10869         nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00    1560/10764       nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [33]
                0.00    0.00    1560/10764       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00    1560/10764       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    1872/10764       nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    4212/10764       nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
[61]     0.0    0.00    0.00   10764         nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [61]
-----------------------------------------------
                0.00    0.00     780/10452       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [37]
                0.00    0.00    1560/10452       nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [34]
                0.00    0.00    1560/10452       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00    1560/10452       nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    1872/10452       nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    3120/10452       nnp::Derivatives::computecosijk(double const*, double const*) [35]
[62]     0.0    0.00    0.00   10452         nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
                0.00    0.00   10452/10452       nnp::Derivatives::computeProdThird(nnp::Derivatives const&, nnp::Derivatives&) const [63]
                0.00    0.00   10452/10452       nnp::Derivatives::computeProdFourth(nnp::Derivatives const&, nnp::Derivatives&) const [64]
-----------------------------------------------
                0.00    0.00   10452/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
[63]     0.0    0.00    0.00   10452         nnp::Derivatives::computeProdThird(nnp::Derivatives const&, nnp::Derivatives&) const [63]
-----------------------------------------------
                0.00    0.00   10452/10452       nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [62]
[64]     0.0    0.00    0.00   10452         nnp::Derivatives::computeProdFourth(nnp::Derivatives const&, nnp::Derivatives&) const [64]
-----------------------------------------------
                0.00    0.00    9204/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
[65]     0.0    0.00    0.00    9204         nnp::Derivatives::computed3fu(double const*, nnp::Derivatives const&) [65]
-----------------------------------------------
                0.00    0.00    9204/9204        nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
[66]     0.0    0.00    0.00    9204         nnp::Derivatives::computed4fu(double const*, nnp::Derivatives const&) [66]
-----------------------------------------------
                0.00    0.00     780/9204        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [18]
                0.00    0.00     780/9204        nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [23]
                0.00    0.00    1560/9204        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [38]
                0.00    0.00    1872/9204        nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [25]
                0.00    0.00    4212/9204        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
[67]     0.0    0.00    0.00    9204         nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [67]
                0.00    0.00    9204/9204        nnp::Derivatives::computed3fu(double const*, nnp::Derivatives const&) [65]
                0.00    0.00    9204/9204        nnp::Derivatives::computed4fu(double const*, nnp::Derivatives const&) [66]
-----------------------------------------------
                0.00    0.00       7/8925        nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00       9/8925        nnp::Settings::readFile() [335]
                0.00    0.00      14/8925        nnp::Log::addLogEntry(std::string const&) [71]
                0.00    0.00     220/8925        nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [160]
                0.00    0.00    8675/8925        nnp::split(std::string const&, char) [81]
[68]     0.0    0.00    0.00    8925         void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&) [68]
-----------------------------------------------
                0.00    0.00    4212/8424        nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [28]
                0.00    0.00    4212/8424        nnp::Derivatives::Derivatives(int, int, double const*, double) [22]
[69]     0.0    0.00    0.00    8424         nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [69]
                0.00    0.00     800/800         build9From6jk(double***, double***) [96]
                0.00    0.00     176/216         build9From6ij(double****, double****) [112]
                0.00    0.00      40/40          build9From6jk(double****, double****) [179]
-----------------------------------------------
                0.00    0.00    8112/8112        nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [29]
[70]     0.0    0.00    0.00    8112         nnp::Derivatives::computeSumFourth(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [70]
-----------------------------------------------
                0.00    0.00     280/7963        nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
                0.00    0.00    7683/7963        nnp::Log::operator<<(std::string const&) [72]
[71]     0.0    0.00    0.00    7963         nnp::Log::addLogEntry(std::string const&) [71]
                0.00    0.00      14/8925        void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&) [68]
-----------------------------------------------
                0.00    0.00       4/7651        nnp::Mode::loadSettingsFile(std::string const&) [324]
                0.00    0.00       7/7651        nnp::Mode::setupElementMap() [323]
                0.00    0.00       7/7651        nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
                0.00    0.00       9/7651        nnp::Mode::setupSymmetryFunctionStatistics(bool, bool, bool, bool) [509]
                0.00    0.00       9/7651        nnp::Mode::setupCutoff() [320]
                0.00    0.00       9/7651        nnp::Mode::setupElements() [322]
                0.00    0.00      10/7651        nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00      12/7651        nnp::Mode::initialize() [318]
                0.00    0.00      12/7651        nnp::Mode::setupNormalization() [326]
                0.00    0.00      33/7651        nnp::Mode::setupSymmetryFunctionGroups() [329]
                0.00    0.00      33/7651        nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00      34/7651        nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00      86/7651        compareAnalytic1Numeric(nnp::Prediction&, double*, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >) [347]
                0.00    0.00      86/7651        compareAnalytic1Analytic2(nnp::Prediction&, double*, nnp::Derivatives&) [348]
                0.00    0.00     734/7651        compareAnalyticNumericThird(nnp::Prediction&, double***, nnp::Derivatives&) [349]
                0.00    0.00    6566/7651        compareAnalyticNumericFourth(nnp::Prediction&, double****, nnp::Derivatives&) [350]
[72]     0.0    0.00    0.00    7651         nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00    7683/7963        nnp::Log::addLogEntry(std::string const&) [71]
-----------------------------------------------
                0.00    0.00      18/5811        getNumericFourth(nnp::Prediction&, double) [7]
                0.00    0.00      18/5811        getNumericThird(nnp::Prediction&, double) [6]
                0.00    0.00      39/5811        nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00     780/5811        nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.00     780/5811        nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
                0.00    0.00    1560/5811        nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
                0.00    0.00    2616/5811        nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[73]     0.0    0.00    0.00    5811         nnp::Derivatives::~Derivatives() [73]
-----------------------------------------------
                0.00    0.00    4680/4680        nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
[74]     0.0    0.00    0.00    4680         build9From6ik(double**, double**) [74]
-----------------------------------------------
                0.00    0.00    4400/4400        nnp::Element::updateSymmetryFunctionStatistics(nnp::Atom const&) [119]
[75]     0.0    0.00    0.00    4400         nnp::SymmetryFunction::unscale(double) const [75]
-----------------------------------------------
                0.00    0.00      39/3159        nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
                0.00    0.00     780/3159        nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.00     780/3159        nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
                0.00    0.00    1560/3159        nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
[76]     0.0    0.00    0.00    3159         nnp::Derivatives::reset() [76]
-----------------------------------------------
                0.00    0.00     106/3124        nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
                0.00    0.00     656/3124        nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
                0.00    0.00    1062/3124        std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.107] [99]
                0.00    0.00    1300/3124        std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.103] [98]
[77]     0.0    0.00    0.00    3124         std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const [77]
-----------------------------------------------
                0.00    0.00    3120/3120        nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [4]
[78]     0.0    0.00    0.00    3120         nnp::Derivatives::addTod1F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [78]
-----------------------------------------------
                0.00    0.00       1/2980        nnp::Derivatives::Derivatives(nnp::Derivatives const&) [188]
                0.00    0.00     559/2980        nnp::Derivatives::operator=(nnp::Derivatives const&) [15]
                0.00    0.00     700/2980        nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [58]
                0.00    0.00    1720/2980        nnp::Derivatives::Derivatives(int, int) [55]
[79]     0.0    0.00    0.00    2980         new4Dtable(int) [79]
-----------------------------------------------
                0.00    0.00       1/2537        nnp::ElementMap::registerElements(std::string const&) [313]
                0.00    0.00       2/2537        nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00       2/2537        nnp::Mode::setupElements() [322]
                0.00    0.00      13/2537        nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      13/2537        nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      24/2537        nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
                0.00    0.00      50/2537        nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
                0.00    0.00      50/2537        nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00      50/2537        nnp::SymmetryFunction::setScalingType(nnp::SymmetryFunction::ScalingType, std::string, double, double) [166]
                0.00    0.00     105/2537        nnp::Settings::parseLines() [332]
                0.00    0.00     440/2537        nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [160]
                0.00    0.00     495/2537        nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
                0.00    0.00    1292/2537        nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
[80]     0.0    0.00    0.00    2537         nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
-----------------------------------------------
                0.00    0.00       1/2433        nnp::ElementMap::registerElements(std::string const&) [313]
                0.00    0.00       1/2433        nnp::Mode::setupCutoff() [320]
                0.00    0.00       2/2433        nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00       2/2433        nnp::Mode::setupElements() [322]
                0.00    0.00      13/2433        nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      13/2433        nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      24/2433        nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
                0.00    0.00      50/2433        nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
                0.00    0.00      50/2433        nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00      50/2433        nnp::SymmetryFunction::setScalingType(nnp::SymmetryFunction::ScalingType, std::string, double, double) [166]
                0.00    0.00     440/2433        nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [160]
                0.00    0.00     495/2433        nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
                0.00    0.00    1292/2433        nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
[81]     0.0    0.00    0.00    2433         nnp::split(std::string const&, char) [81]
                0.00    0.00    8675/8925        void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&) [68]
-----------------------------------------------
                0.00    0.00    2400/2400        nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
[82]     0.0    0.00    0.00    2400         build9From6ik(double***, double***) [82]
-----------------------------------------------
                0.00    0.00     524/2301        nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const [147]
                0.00    0.00     665/2301        nnp::SymmetryFunctionGroupAngularWide::calculate(nnp::Atom&, bool) const [142]
                0.00    0.00    1112/2301        nnp::SymmetryFunctionGroupRadial::calculate(nnp::Atom&, bool) const [124]
[83]     0.0    0.00    0.00    2301         nnp::SymmetryFunction::scale(double) const [83]
-----------------------------------------------
                0.00    0.00    1872/1872        nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
[84]     0.0    0.00    0.00    1872         nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, double) [84]
                0.00    0.00    1872/1872        nnp::Derivatives::addD2ij(nnp::Derivatives const&, int, int, double) [85]
                0.00    0.00     960/960         nnp::Derivatives::addD3ij(nnp::Derivatives const&, int, int, double) [93]
-----------------------------------------------
                0.00    0.00    1872/1872        nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, double) [84]
[85]     0.0    0.00    0.00    1872         nnp::Derivatives::addD2ij(nnp::Derivatives const&, int, int, double) [85]
-----------------------------------------------
                0.00    0.00    1560/1560        nnp::Derivatives::computednRijk(double const*, double const*) [87]
[86]     0.0    0.00    0.00    1560         nnp::Derivatives::computed2Rijk() [86]
-----------------------------------------------
                0.00    0.00    1560/1560        nnp::Derivatives::computecosijk(double const*, double const*) [35]
[87]     0.0    0.00    0.00    1560         nnp::Derivatives::computednRijk(double const*, double const*) [87]
                0.00    0.00    1560/1560        nnp::Derivatives::computed2Rijk() [86]
-----------------------------------------------
                0.00    0.00    1560/1560        nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double) [31]
[88]     0.0    0.00    0.00    1560         nnp::Derivatives::addD2ijk(nnp::Derivatives const&, int, int, int, double) [88]
-----------------------------------------------
                0.00    0.00     171/1443        nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
                0.00    0.00    1272/1443        nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
[89]     0.0    0.00    0.00    1443         std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const [89]
-----------------------------------------------
                0.00    0.00      39/1308        nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00    1269/1308        nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[90]     0.0    0.00    0.00    1308         nnp::Derivatives::Derivatives() [90]
-----------------------------------------------
                0.00    0.00    1016/1016        unsigned long const& nnp::safeFind<std::string, unsigned long>(std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > > const&, std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::key_type const&) [100]
[91]     0.0    0.00    0.00    1016         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::find(std::string const&) const [91]
-----------------------------------------------
                0.00    0.00     144/984         nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&) [174]
                0.00    0.00     840/984         nnp::getDerivativesRij(double const*, double*, double (*) [6]) [107]
[92]     0.0    0.00    0.00     984         nnp::getDerivativesR(double const*, double const&, int, int) [92]
-----------------------------------------------
                0.00    0.00     960/960         nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, double) [84]
[93]     0.0    0.00    0.00     960         nnp::Derivatives::addD3ij(nnp::Derivatives const&, int, int, double) [93]
-----------------------------------------------
                0.00    0.00     402/914         nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const [147]
                0.00    0.00     512/914         nnp::SymmetryFunctionGroupAngularWide::calculate(nnp::Atom&, bool) const [142]
[94]     0.0    0.00    0.00     914         nnp::pow_int(double, int) [94]
-----------------------------------------------
                0.00    0.00     891/891         nnp::NeuralNetwork::propagate() [104]
[95]     0.0    0.00    0.00     891         nnp::NeuralNetwork::propagateLayer(nnp::NeuralNetwork::Layer&, nnp::NeuralNetwork::Layer&) [95]
-----------------------------------------------
                0.00    0.00     800/800         nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [69]
[96]     0.0    0.00    0.00     800         build9From6jk(double***, double***) [96]
-----------------------------------------------
                0.00    0.00      15/678         nnp::SymmetryFunctionGroupRadial::SymmetryFunctionGroupRadial(nnp::ElementMap const&) [239]
                0.00    0.00      18/678         nnp::SymmetryFunctionGroupAngularWide::SymmetryFunctionGroupAngularWide(nnp::ElementMap const&) [253]
                0.00    0.00      18/678         nnp::SymmetryFunctionGroupAngularNarrow::SymmetryFunctionGroupAngularNarrow(nnp::ElementMap const&) [257]
                0.00    0.00      49/678         nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
                0.00    0.00      72/678         nnp::SymmetryFunctionRadial::SymmetryFunctionRadial(nnp::ElementMap const&) [195]
                0.00    0.00      78/678         nnp::SymmetryFunctionAngularNarrow::SymmetryFunctionAngularNarrow(nnp::ElementMap const&) [215]
                0.00    0.00      78/678         nnp::SymmetryFunctionAngularWide::SymmetryFunctionAngularWide(nnp::ElementMap const&) [211]
                0.00    0.00     350/678         nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
[97]     0.0    0.00    0.00     678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
-----------------------------------------------
                0.00    0.00     650/650         nnp::SymmetryFunction::getPrintFormat() const [171]
[98]     0.0    0.00    0.00     650         std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.103] [98]
                0.00    0.00    1300/3124        std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const [77]
-----------------------------------------------
                0.00    0.00      59/531         nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
                0.00    0.00     472/531         nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
[99]     0.0    0.00    0.00     531         std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.107] [99]
                0.00    0.00    1062/3124        std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const [77]
-----------------------------------------------
                0.00    0.00     508/508         nnp::ElementMap::index(std::string const&) const [101]
[100]    0.0    0.00    0.00     508         unsigned long const& nnp::safeFind<std::string, unsigned long>(std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > > const&, std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::key_type const&) [100]
                0.00    0.00    1016/1016        std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::find(std::string const&) const [91]
-----------------------------------------------
                0.00    0.00       2/508         nnp::Mode::setupElements() [322]
                0.00    0.00      39/508         nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      39/508         nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      48/508         nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
                0.00    0.00      50/508         nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00     330/508         nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
[101]    0.0    0.00    0.00     508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00     508/508         unsigned long const& nnp::safeFind<std::string, unsigned long>(std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > > const&, std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::key_type const&) [100]
-----------------------------------------------
                0.00    0.00     415/415         nnp::Structure::readFromFile(std::string) [137]
[102]    0.0    0.00    0.00     415         void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long const&>(unsigned long const&) [102]
-----------------------------------------------
                0.00    0.00     376/376         nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [19]
[103]    0.0    0.00    0.00     376         nnp::Derivatives::computed4Fzeta(nnp::Derivatives const&, double) [103]
-----------------------------------------------
                0.00    0.00       3/297         nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
                0.00    0.00     117/297         nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
                0.00    0.00     177/297         nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
[104]    0.0    0.00    0.00     297         nnp::NeuralNetwork::propagate() [104]
                0.00    0.00     891/891         nnp::NeuralNetwork::propagateLayer(nnp::NeuralNetwork::Layer&, nnp::NeuralNetwork::Layer&) [95]
-----------------------------------------------
                0.00    0.00       3/297         nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
                0.00    0.00     117/297         nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
                0.00    0.00     177/297         nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
[105]    0.0    0.00    0.00     297         nnp::NeuralNetwork::setInput(double const* const&) const [105]
-----------------------------------------------
                0.00    0.00     117/294         nnp::Derivatives::compute(nnp::NeuralNetwork const*) [8]
                0.00    0.00     177/294         nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
[106]    0.0    0.00    0.00     294         nnp::NeuralNetwork::getOutput(double*) const [106]
-----------------------------------------------
                0.00    0.00      40/280         nnp::getDerivativesRij2pRik2(double const*, double const*, double, double*, double (*) [9]) [202]
                0.00    0.00      60/280         nnp::getDerivativesRij2pRik2pRjk2(double const*, double const*, double const*, double, double*, double (*) [9]) [203]
                0.00    0.00      80/280         nnp::getDerivativesRijRik(double const*, double const*, double*, double (*) [9]) [183]
                0.00    0.00     100/280         nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const [136]
[107]    0.0    0.00    0.00     280         nnp::getDerivativesRij(double const*, double*, double (*) [6]) [107]
                0.00    0.00     840/984         nnp::getDerivativesR(double const*, double const&, int, int) [92]
-----------------------------------------------
                0.00    0.00     270/270         nnp::Structure::readFromFile(std::string) [137]
[108]    0.0    0.00    0.00     270         void std::vector<nnp::Atom::Neighbor, std::allocator<nnp::Atom::Neighbor> >::_M_emplace_back_aux<nnp::Atom::Neighbor>(nnp::Atom::Neighbor&&) [108]
-----------------------------------------------
                0.00    0.00     268/268         nnp::Structure::readFromFile(std::string) [137]
[109]    0.0    0.00    0.00     268         nnp::Atom::Neighbor::Neighbor() [109]
-----------------------------------------------
                0.00    0.00     260/260         nnp::Atom::allocate(bool) [149]
[110]    0.0    0.00    0.00     260         std::vector<nnp::Vec3D, std::allocator<nnp::Vec3D> >::_M_default_append(unsigned long) [110]
-----------------------------------------------
                0.00    0.00       1/234         nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00       2/234         nnp::SymmetryFunctionGroupAngularWide::setScalingFactors() [252]
                0.00    0.00       2/234         nnp::SymmetryFunctionGroupAngularNarrow::setScalingFactors() [256]
                0.00    0.00       3/234         nnp::SymmetryFunctionGroupRadial::setScalingFactors() [238]
                0.00    0.00     226/234         nnp::Atom::allocate(bool) [149]
[111]    0.0    0.00    0.00     234         std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&) [111]
-----------------------------------------------
                0.00    0.00      40/216         nnp::Derivatives::computecosijk(double const*, double const*) [35]
                0.00    0.00     176/216         nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [69]
[112]    0.0    0.00    0.00     216         build9From6ij(double****, double****) [112]
-----------------------------------------------
                0.00    0.00      62/189         nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const [147]
                0.00    0.00     127/189         nnp::SymmetryFunctionGroupRadial::calculate(nnp::Atom&, bool) const [124]
[113]    0.0    0.00    0.00     189         nnp::CutoffFunction::fdfTANHU(double, double&, double&) const [113]
-----------------------------------------------
                0.00    0.00     177/177         nnp::Structure::toPhysicalUnits(double, double, double, double) [150]
[114]    0.0    0.00    0.00     177         nnp::Atom::toPhysicalUnits(double, double) [114]
-----------------------------------------------
                0.00    0.00     177/177         nnp::Structure::toNormalizedUnits(double, double, double, double) [151]
[115]    0.0    0.00    0.00     177         nnp::Atom::toNormalizedUnits(double, double) [115]
-----------------------------------------------
                0.00    0.00     177/177         nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
[116]    0.0    0.00    0.00     177         nnp::NeuralNetwork::calculateDEdG(double*) const [116]
-----------------------------------------------
                0.00    0.00      42/168         void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156] [287]
                0.00    0.00      42/168         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.151] [244]
                0.00    0.00      84/168         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168] [283]
[117]    0.0    0.00    0.00     168         nnp::SymmetryFunctionRadial::operator<(nnp::SymmetryFunction const&) const [117]
-----------------------------------------------
                0.00    0.00     165/165         nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
[118]    0.0    0.00    0.00     165         nnp::Atom::Atom() [118]
-----------------------------------------------
                0.00    0.00     165/165         nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool) [159]
[119]    0.0    0.00    0.00     165         nnp::Element::updateSymmetryFunctionStatistics(nnp::Atom const&) [119]
                0.00    0.00    4400/4400        nnp::SymmetryFunction::unscale(double) const [75]
                0.00    0.00    3025/10869       nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00     165/165         nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
[120]    0.0    0.00    0.00     165         void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::emplace_back<nnp::Atom>(nnp::Atom&&) [120]
-----------------------------------------------
                0.00    0.00     165/165         nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
[121]    0.0    0.00    0.00     165         void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::_M_emplace_back_aux<nnp::Atom>(nnp::Atom&&) [121]
-----------------------------------------------
                0.00    0.00      22/158         nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
                0.00    0.00      24/158         nnp::SymmetryFunctionGroupRadial::sortMembers() [237]
                0.00    0.00      56/158         nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
                0.00    0.00      56/158         nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
[122]    0.0    0.00    0.00     158         void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&) [122]
-----------------------------------------------
                0.00    0.00       2/157         nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [217]
                0.00    0.00       2/157         nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [192]
                0.00    0.00       3/157         nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [141]
                0.00    0.00      13/157         nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      13/157         nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      24/157         nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
                0.00    0.00      50/157         nnp::Element::changeLengthUnitSymmetryFunctions(double) [262]
                0.00    0.00      50/157         nnp::Element::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [259]
[123]    0.0    0.00    0.00     157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00     147/147         nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const [146]
[124]    0.0    0.00    0.00     147         nnp::SymmetryFunctionGroupRadial::calculate(nnp::Atom&, bool) const [124]
                0.00    0.00    1112/2301        nnp::SymmetryFunction::scale(double) const [83]
                0.00    0.00     127/189         nnp::CutoffFunction::fdfTANHU(double, double&, double&) const [113]
-----------------------------------------------
                0.00    0.00     120/120         nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [36]
[125]    0.0    0.00    0.00     120         build9From6ik(double****, double****) [125]
-----------------------------------------------
                0.00    0.00      20/120         nnp::getDerivativesRij2pRik2(double const*, double const*, double, double*, double (*) [9]) [202]
                0.00    0.00      20/120         nnp::getDerivativesRij2pRik2pRjk2(double const*, double const*, double const*, double, double*, double (*) [9]) [203]
                0.00    0.00      20/120         nnp::getDerivativesfc(double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [200]
                0.00    0.00      20/120         nnp::getDerivativesfc(double const*, double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [201]
                0.00    0.00      40/120         nnp::getDerivativesRijRik(double const*, double const*, double*, double (*) [9]) [183]
[126]    0.0    0.00    0.00     120         nnp::build9From6ik(double const (*) [6], double (*) [9]) [126]
-----------------------------------------------
                0.00    0.00       2/119         nnp::Prediction::~Prediction() [363]
                0.00    0.00       2/119         nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide() [254]
                0.00    0.00       2/119         nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow() [258]
                0.00    0.00       3/119         nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial() [240]
                0.00    0.00       5/119         nnp::Element::~Element() [232]
                0.00    0.00      13/119         nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow() [216]
                0.00    0.00      13/119         nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide() [212]
                0.00    0.00      24/119         nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial() [196]
                0.00    0.00      55/119         nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
[127]    0.0    0.00    0.00     119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00       2/119         nnp::Prediction::~Prediction() [363]
                0.00    0.00       2/119         nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide() [254]
                0.00    0.00       2/119         nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow() [258]
                0.00    0.00       3/119         nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial() [240]
                0.00    0.00       5/119         nnp::Element::~Element() [232]
                0.00    0.00      13/119         nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow() [216]
                0.00    0.00      13/119         nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide() [212]
                0.00    0.00      24/119         nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial() [196]
                0.00    0.00      55/119         nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
[128]    0.0    0.00    0.00     119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
-----------------------------------------------
                0.00    0.00       1/118         nnp::Prediction::getHessian() [40]
                0.00    0.00      19/118         nnp::Prediction::predict() [206]
                0.00    0.00      39/118         nnp::Prediction::getHighDerivatives(int, int) [1]
                0.00    0.00      59/118         nnp::Mode::calculateForces(nnp::Structure&) const [153]
[129]    0.0    0.00    0.00     118         nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const [129]
-----------------------------------------------
                0.00    0.00       2/117         nnp::Prediction::getHessian() [40]
                0.00    0.00      18/117         getNumericHessian(nnp::Prediction&, double) [344]
                0.00    0.00      19/117         nnp::Prediction::predict() [206]
                0.00    0.00      78/117         nnp::Prediction::getHighDerivatives(int, int) [1]
[130]    0.0    0.00    0.00     117         nnp::Mode::addEnergyOffset(nnp::Structure&, bool) [130]
-----------------------------------------------
                0.00    0.00     117/117         nnp::Derivatives::compute(nnp::NeuralNetwork const*) [8]
[131]    0.0    0.00    0.00     117         nnp::NeuralNetwork::getNumNeurons(int) const [131]
-----------------------------------------------
                                 117             std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00       1/117         void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&) [277]
                0.00    0.00       2/117         nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
                0.00    0.00       2/117         nnp::Element::Element(nnp::Element const&) [263]
                0.00    0.00       7/117         nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
                0.00    0.00      50/117         nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
                0.00    0.00      55/117         nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
[132]    0.0    0.00    0.00     117+117     std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                                 117             std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
-----------------------------------------------
                                 117             std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                0.00    0.00       1/117         void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&) [277]
                0.00    0.00       2/117         nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
                0.00    0.00       2/117         nnp::Element::Element(nnp::Element const&) [263]
                0.00    0.00       7/117         nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
                0.00    0.00      50/117         nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
                0.00    0.00      55/117         nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
[133]    0.0    0.00    0.00     117+117     std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                                 117             std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
-----------------------------------------------
                0.00    0.00       2/107         nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [217]
                0.00    0.00       2/107         nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [192]
                0.00    0.00       3/107         nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [141]
                0.00    0.00      13/107         nnp::SymmetryFunctionAngularNarrow::changeLengthUnit(double) [214]
                0.00    0.00      13/107         nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      13/107         nnp::SymmetryFunctionAngularWide::changeLengthUnit(double) [210]
                0.00    0.00      13/107         nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      24/107         nnp::SymmetryFunctionRadial::changeLengthUnit(double) [194]
                0.00    0.00      24/107         nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
[134]    0.0    0.00    0.00     107         nnp::CutoffFunction::setCutoffRadius(double) [134]
-----------------------------------------------
                0.00    0.00     105/105         nnp::Settings::parseLines() [332]
[135]    0.0    0.00    0.00     105         std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, unsigned long> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_insert_equal<std::pair<std::string, std::pair<std::string, unsigned long> > >(std::pair<std::string, std::pair<std::string, unsigned long> >&&) [135]
-----------------------------------------------
                0.00    0.00      40/100         nnp::getDerivativesfc(double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [200]
                0.00    0.00      60/100         nnp::getDerivativesfc(double const*, double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [201]
[136]    0.0    0.00    0.00     100         nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const [136]
                0.00    0.00     300/20820       nnp::CutoffFunction::dnfTANHU(double, int) const [59]
                0.00    0.00     100/280         nnp::getDerivativesRij(double const*, double*, double (*) [6]) [107]
-----------------------------------------------
                0.00    0.00      43/98          nnp::Structure::calculateNeighborList(double) [163]
                0.00    0.00      55/98          nnp::Prediction::readStructureFromFile(std::string const&) [165]
[137]    0.0    0.00    0.00      98         nnp::Structure::readFromFile(std::string) [137]
                0.00    0.00     415/415         void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long const&>(unsigned long const&) [102]
                0.00    0.00     270/270         void std::vector<nnp::Atom::Neighbor, std::allocator<nnp::Atom::Neighbor> >::_M_emplace_back_aux<nnp::Atom::Neighbor>(nnp::Atom::Neighbor&&) [108]
                0.00    0.00     268/268         nnp::Atom::Neighbor::Neighbor() [109]
                0.00    0.00      55/55          nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [160]
-----------------------------------------------
                0.00    0.00       1/83          nnp::Settings::parseLines() [332]
                0.00    0.00       2/83          nnp::Settings::readFile() [335]
                0.00    0.00       5/83          nnp::SymmetryFunctionGroup::initializePrintOrder() [445]
                0.00    0.00       5/83          nnp::SymmetryFunction::initializePrintOrder() [432]
                0.00    0.00       8/83          nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00       8/83          nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
                0.00    0.00      12/83          nnp::Element::infoSymmetryFunctionScaling() const [274]
                0.00    0.00      12/83          nnp::Element::infoSymmetryFunctionParameters() const [275]
                0.00    0.00      15/83          nnp::NeuralNetwork::info() const [265]
                0.00    0.00      15/83          nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
[138]    0.0    0.00    0.00      83         void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
-----------------------------------------------
                0.00    0.00      13/77          void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168] [283]
                0.00    0.00      14/77          void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156] [287]
                0.00    0.00      22/77          void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.197] [282]
                0.00    0.00      28/77          nnp::Element::sortSymmetryFunctions() [260]
[139]    0.0    0.00    0.00      77         nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const [139]
-----------------------------------------------
                0.00    0.00       5/73          void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168] [283]
                0.00    0.00      22/73          void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.197] [281]
                0.00    0.00      46/73          nnp::Element::sortSymmetryFunctions() [260]
[140]    0.0    0.00    0.00      73         nnp::SymmetryFunctionAngularWide::operator<(nnp::SymmetryFunction const&) const [140]
-----------------------------------------------
                0.00    0.00      72/72          nnp::Element::setupSymmetryFunctionGroups() [261]
[141]    0.0    0.00    0.00      72         nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [141]
                0.00    0.00      12/12          void std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionRadial const* const&>(nnp::SymmetryFunctionRadial const* const&) [220]
                0.00    0.00       3/57          nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType) [155]
                0.00    0.00       3/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
                0.00    0.00       3/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00      68/68          nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const [146]
[142]    0.0    0.00    0.00      68         nnp::SymmetryFunctionGroupAngularWide::calculate(nnp::Atom&, bool) const [142]
                0.00    0.00     665/2301        nnp::SymmetryFunction::scale(double) const [83]
                0.00    0.00     512/914         nnp::pow_int(double, int) [94]
-----------------------------------------------
                0.00    0.00       2/67          nnp::Settings::getValues(std::string const&) const [276]
                0.00    0.00      65/67          nnp::Settings::sanityCheck() [333]
[143]    0.0    0.00    0.00      67         std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::equal_range(std::string const&) const [143]
-----------------------------------------------
                0.00    0.00       4/65          createKnownKeywordsMap() [346]
                0.00    0.00      61/65          std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator[](std::string&&) [148]
[144]    0.0    0.00    0.00      65         std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&) [144]
                0.00    0.00       1/1           std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&) [340]
-----------------------------------------------
                0.00    0.00       4/64          nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide() [254]
                0.00    0.00       4/64          nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow() [258]
                0.00    0.00       6/64          nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial() [240]
                0.00    0.00      13/64          nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow() [216]
                0.00    0.00      13/64          nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide() [212]
                0.00    0.00      24/64          nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial() [196]
[145]    0.0    0.00    0.00      64         std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
-----------------------------------------------
                0.00    0.00      62/62          void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
[146]    0.0    0.00    0.00      62         nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const [146]
                0.00    0.00     147/147         nnp::SymmetryFunctionGroupRadial::calculate(nnp::Atom&, bool) const [124]
                0.00    0.00      68/68          nnp::SymmetryFunctionGroupAngularWide::calculate(nnp::Atom&, bool) const [142]
                0.00    0.00      61/61          nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const [147]
-----------------------------------------------
                0.00    0.00      61/61          nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const [146]
[147]    0.0    0.00    0.00      61         nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const [147]
                0.00    0.00     524/2301        nnp::SymmetryFunction::scale(double) const [83]
                0.00    0.00     402/914         nnp::pow_int(double, int) [94]
                0.00    0.00      62/189         nnp::CutoffFunction::fdfTANHU(double, double&, double&) const [113]
-----------------------------------------------
                0.00    0.00      61/61          createKnownKeywordsMap() [346]
[148]    0.0    0.00    0.00      61         std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator[](std::string&&) [148]
                0.00    0.00      61/65          std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&) [144]
-----------------------------------------------
                0.00    0.00      60/60          void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
[149]    0.0    0.00    0.00      60         nnp::Atom::allocate(bool) [149]
                0.00    0.00     260/260         std::vector<nnp::Vec3D, std::allocator<nnp::Vec3D> >::_M_default_append(unsigned long) [110]
                0.00    0.00     226/234         std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&) [111]
-----------------------------------------------
                0.00    0.00       1/59          nnp::Prediction::getHessian() [40]
                0.00    0.00      19/59          nnp::Prediction::predict() [206]
                0.00    0.00      39/59          nnp::Prediction::getHighDerivatives(int, int) [1]
[150]    0.0    0.00    0.00      59         nnp::Structure::toPhysicalUnits(double, double, double, double) [150]
                0.00    0.00     177/177         nnp::Atom::toPhysicalUnits(double, double) [114]
-----------------------------------------------
                0.00    0.00       1/59          nnp::Prediction::getHessian() [40]
                0.00    0.00      19/59          nnp::Prediction::predict() [206]
                0.00    0.00      39/59          nnp::Prediction::getHighDerivatives(int, int) [1]
[151]    0.0    0.00    0.00      59         nnp::Structure::toNormalizedUnits(double, double, double, double) [151]
                0.00    0.00     177/177         nnp::Atom::toNormalizedUnits(double, double) [115]
-----------------------------------------------
                0.00    0.00       1/59          nnp::Prediction::getHessian() [40]
                0.00    0.00      19/59          nnp::Prediction::predict() [206]
                0.00    0.00      39/59          nnp::Prediction::getHighDerivatives(int, int) [1]
[152]    0.0    0.00    0.00      59         nnp::Mode::calculateEnergy(nnp::Structure&) const [152]
-----------------------------------------------
                0.00    0.00       1/59          nnp::Prediction::getHessian() [40]
                0.00    0.00      19/59          nnp::Prediction::predict() [206]
                0.00    0.00      39/59          nnp::Prediction::getHighDerivatives(int, int) [1]
[153]    0.0    0.00    0.00      59         nnp::Mode::calculateForces(nnp::Structure&) const [153]
                0.00    0.00      59/118         nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const [129]
                0.00    0.00      17/44          void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
-----------------------------------------------
                0.00    0.00       1/59          nnp::Prediction::getHessian() [40]
                0.00    0.00      19/59          nnp::Prediction::predict() [206]
                0.00    0.00      39/59          nnp::Prediction::getHighDerivatives(int, int) [1]
[154]    0.0    0.00    0.00      59         nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
                0.00    0.00     177/297         nnp::NeuralNetwork::propagate() [104]
                0.00    0.00     177/297         nnp::NeuralNetwork::setInput(double const* const&) const [105]
                0.00    0.00     177/177         nnp::NeuralNetwork::calculateDEdG(double*) const [116]
                0.00    0.00     177/294         nnp::NeuralNetwork::getOutput(double*) const [106]
-----------------------------------------------
                0.00    0.00       2/57          nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [217]
                0.00    0.00       2/57          nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [192]
                0.00    0.00       3/57          nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [141]
                0.00    0.00      50/57          nnp::SymmetryFunction::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [167]
[155]    0.0    0.00    0.00      57         nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType) [155]
-----------------------------------------------
                0.00    0.00       7/57          nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
                0.00    0.00      50/57          nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
[156]    0.0    0.00    0.00      57         nnp::CutoffFunction::CutoffFunction() [156]
-----------------------------------------------
                0.00    0.00       1/56          nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00       1/56          nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
                0.00    0.00      54/56          nnp::Structure::reset() [164]
[157]    0.0    0.00    0.00      56         std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&) [157]
-----------------------------------------------
                0.00    0.00      55/55          nnp::Prediction::readStructureFromFile(std::string const&) [165]
[158]    0.0    0.00    0.00      55         nnp::Mode::removeEnergyOffset(nnp::Structure&, bool) [158]
-----------------------------------------------
                0.00    0.00      19/55          nnp::Prediction::predict() [206]
                0.00    0.00      36/55          nnp::Prediction::getHighDerivatives(int, int) [1]
[159]    0.0    0.00    0.00      55         nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool) [159]
                0.00    0.00     165/165         nnp::Element::updateSymmetryFunctionStatistics(nnp::Atom const&) [119]
                0.00    0.00      19/44          void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
-----------------------------------------------
                0.00    0.00      55/55          nnp::Structure::readFromFile(std::string) [137]
[160]    0.0    0.00    0.00      55         nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [160]
                0.00    0.00     440/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00     440/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00     220/8925        void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&) [68]
                0.00    0.00      55/55          nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
-----------------------------------------------
                0.00    0.00      55/55          nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [160]
[161]    0.0    0.00    0.00      55         nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [161]
                0.00    0.00     495/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00     495/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00     330/508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00     165/165         nnp::Atom::Atom() [118]
                0.00    0.00     165/165         void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::_M_emplace_back_aux<nnp::Atom>(nnp::Atom&&) [121]
                0.00    0.00     165/165         void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::emplace_back<nnp::Atom>(nnp::Atom&&) [120]
-----------------------------------------------
                0.00    0.00      55/55          nnp::Prediction::readStructureFromFile(std::string const&) [165]
[162]    0.0    0.00    0.00      55         nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
                0.00    0.00      55/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
                0.00    0.00      55/117         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00      55/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00      55/117         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                0.00    0.00       1/56          std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&) [157]
-----------------------------------------------
                0.00    0.00      19/55          nnp::Prediction::predict() [206]
                0.00    0.00      36/55          nnp::Prediction::getHighDerivatives(int, int) [1]
[163]    0.0    0.00    0.00      55         nnp::Structure::calculateNeighborList(double) [163]
                0.00    0.00      43/98          nnp::Structure::readFromFile(std::string) [137]
-----------------------------------------------
                0.00    0.00      55/55          nnp::Prediction::readStructureFromFile(std::string const&) [165]
[164]    0.0    0.00    0.00      55         nnp::Structure::reset() [164]
                0.00    0.00      54/56          std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&) [157]
-----------------------------------------------
                0.00    0.00      18/54          getNumericFourth(nnp::Prediction&, double) [7]
                0.00    0.00      18/54          getNumericThird(nnp::Prediction&, double) [6]
                0.00    0.00      18/54          getNumericHessian(nnp::Prediction&, double) [344]
[165]    0.0    0.00    0.00      54         nnp::Prediction::readStructureFromFile(std::string const&) [165]
                0.00    0.00      55/55          nnp::Structure::reset() [164]
                0.00    0.00      55/55          nnp::Structure::setElementMap(nnp::ElementMap const&) [162]
                0.00    0.00      55/98          nnp::Structure::readFromFile(std::string) [137]
                0.00    0.00      55/55          nnp::Mode::removeEnergyOffset(nnp::Structure&, bool) [158]
-----------------------------------------------
                0.00    0.00      50/50          nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const [269]
[166]    0.0    0.00    0.00      50         nnp::SymmetryFunction::setScalingType(nnp::SymmetryFunction::ScalingType, std::string, double, double) [166]
                0.00    0.00      50/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00      50/2433        nnp::split(std::string const&, char) [81]
-----------------------------------------------
                0.00    0.00      50/50          nnp::Element::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [259]
[167]    0.0    0.00    0.00      50         nnp::SymmetryFunction::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [167]
                0.00    0.00      50/57          nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType) [155]
-----------------------------------------------
                0.00    0.00      13/50          nnp::SymmetryFunctionAngularNarrow::SymmetryFunctionAngularNarrow(nnp::ElementMap const&) [215]
                0.00    0.00      13/50          nnp::SymmetryFunctionAngularWide::SymmetryFunctionAngularWide(nnp::ElementMap const&) [211]
                0.00    0.00      24/50          nnp::SymmetryFunctionRadial::SymmetryFunctionRadial(nnp::ElementMap const&) [195]
[168]    0.0    0.00    0.00      50         nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
                0.00    0.00     350/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00      50/117         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00      50/117         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                0.00    0.00      50/57          nnp::CutoffFunction::CutoffFunction() [156]
-----------------------------------------------
                0.00    0.00      50/50          nnp::Mode::setupSymmetryFunctions() [327]
[169]    0.0    0.00    0.00      50         nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
                0.00    0.00      50/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00      50/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00      24/24          nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
                0.00    0.00      24/24          nnp::SymmetryFunctionRadial::SymmetryFunctionRadial(nnp::ElementMap const&) [195]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularNarrow::SymmetryFunctionAngularNarrow(nnp::ElementMap const&) [215]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularWide::SymmetryFunctionAngularWide(nnp::ElementMap const&) [211]
                0.00    0.00      12/12          void std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> >::_M_emplace_back_aux<nnp::SymmetryFunction*>(nnp::SymmetryFunction*&&) [221]
-----------------------------------------------
                0.00    0.00      50/50          nnp::Element::infoSymmetryFunctionScaling() const [274]
[170]    0.0    0.00    0.00      50         nnp::SymmetryFunction::scalingLine() const [170]
                0.00    0.00      50/10869       nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00      13/50          nnp::SymmetryFunctionAngularNarrow::parameterLine() const [219]
                0.00    0.00      13/50          nnp::SymmetryFunctionAngularWide::parameterLine() const [218]
                0.00    0.00      24/50          nnp::SymmetryFunctionRadial::parameterLine() const [197]
[171]    0.0    0.00    0.00      50         nnp::SymmetryFunction::getPrintFormat() const [171]
                0.00    0.00     650/650         std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.103] [98]
-----------------------------------------------
                0.00    0.00      13/50          nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00      13/50          nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
                0.00    0.00      24/50          nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
[172]    0.0    0.00    0.00      50         nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
                0.00    0.00    1272/1443        std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const [89]
                0.00    0.00     656/3124        std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const [77]
                0.00    0.00     472/531         std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.107] [99]
-----------------------------------------------
                0.00    0.00      48/48          nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [26]
[173]    0.0    0.00    0.00      48         nnp::Derivatives::addD4ij(nnp::Derivatives const&, int, int, double) [173]
-----------------------------------------------
                0.00    0.00      48/48          nnp::SymmetryFunctionRadial::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [186]
[174]    0.0    0.00    0.00      48         nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&) [174]
                0.00    0.00     144/984         nnp::getDerivativesR(double const*, double const&, int, int) [92]
                0.00    0.00      96/20820       nnp::CutoffFunction::dnfTANHU(double, int) const [59]
                0.00    0.00      48/48          nnp::CutoffFunction::fTANHU(double) const [176]
-----------------------------------------------
                0.00    0.00      48/48          nnp::SymmetryFunctionRadial::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [186]
[175]    0.0    0.00    0.00      48         nnp::setSecondDerivesij(double (*) [6], int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [175]
-----------------------------------------------
                0.00    0.00      48/48          nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&) [174]
[176]    0.0    0.00    0.00      48         nnp::CutoffFunction::fTANHU(double) const [176]
-----------------------------------------------
                0.00    0.00      45/45          void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
[177]    0.0    0.00    0.00      45         nnp::Atom::getNumNeighbors(double) const [177]
-----------------------------------------------
                0.00    0.00       8/44          nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [192]
                0.00    0.00      17/44          nnp::Mode::calculateForces(nnp::Structure&) const [153]
                0.00    0.00      19/44          nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool) [159]
[178]    0.0    0.00    0.00      44         void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
                0.00    0.00      62/62          nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const [146]
                0.00    0.00      60/60          nnp::Atom::allocate(bool) [149]
                0.00    0.00      45/45          nnp::Atom::getNumNeighbors(double) const [177]
-----------------------------------------------
                0.00    0.00      40/40          nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [69]
[179]    0.0    0.00    0.00      40         build9From6jk(double****, double****) [179]
-----------------------------------------------
                0.00    0.00      20/40          nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [17]
                0.00    0.00      20/40          nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const [20]
[180]    0.0    0.00    0.00      40         nnp::Derivatives::addD4ijk(nnp::Derivatives const&, int, int, int, double) [180]
-----------------------------------------------
                0.00    0.00      40/40          nnp::getDerivativescosijk(double const*, double const*, double*, double (*) [9]) [184]
[181]    0.0    0.00    0.00      40         nnp::getDerivativesRijk(double (*) [9]) [181]
-----------------------------------------------
                0.00    0.00      20/40          nnp::SymmetryFunctionAngularNarrow::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [205]
                0.00    0.00      20/40          nnp::SymmetryFunctionAngularWide::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [204]
[182]    0.0    0.00    0.00      40         nnp::setSecondDerivesijk(double (*) [9], int, int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [182]
-----------------------------------------------
                0.00    0.00      40/40          nnp::getDerivativescosijk(double const*, double const*, double*, double (*) [9]) [184]
[183]    0.0    0.00    0.00      40         nnp::getDerivativesRijRik(double const*, double const*, double*, double (*) [9]) [183]
                0.00    0.00      80/280         nnp::getDerivativesRij(double const*, double*, double (*) [6]) [107]
                0.00    0.00      40/120         nnp::build9From6ik(double const (*) [6], double (*) [9]) [126]
-----------------------------------------------
                0.00    0.00      40/40          nnp::getDerivativescosijk(double const*, double const*, double, double, double*, double (*) [9]) [185]
[184]    0.0    0.00    0.00      40         nnp::getDerivativescosijk(double const*, double const*, double*, double (*) [9]) [184]
                0.00    0.00      40/40          nnp::getDerivativesRijk(double (*) [9]) [181]
                0.00    0.00      40/40          nnp::getDerivativesRijRik(double const*, double const*, double*, double (*) [9]) [183]
-----------------------------------------------
                0.00    0.00      20/40          nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [198]
                0.00    0.00      20/40          nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [199]
[185]    0.0    0.00    0.00      40         nnp::getDerivativescosijk(double const*, double const*, double, double, double*, double (*) [9]) [185]
                0.00    0.00      40/40          nnp::getDerivativescosijk(double const*, double const*, double*, double (*) [9]) [184]
-----------------------------------------------
                0.00    0.00      40/40          nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
[186]    0.0    0.00    0.00      40         nnp::SymmetryFunctionRadial::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [186]
                0.00    0.00      48/48          nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&) [174]
                0.00    0.00      48/48          nnp::setSecondDerivesij(double (*) [6], int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [175]
-----------------------------------------------
                0.00    0.00      39/39          nnp::Prediction::getHighDerivatives(int, int) [1]
[187]    0.0    0.00    0.00      39         nnp::Derivatives::toPhysicalUnits(double, double) [187]
-----------------------------------------------
                0.00    0.00      39/39          nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const [3]
[188]    0.0    0.00    0.00      39         nnp::Derivatives::Derivatives(nnp::Derivatives const&) [188]
                0.00    0.00       1/2980        new4Dtable(int) [79]
-----------------------------------------------
                0.00    0.00       2/39          nnp::Settings::getValues(std::string const&) const [276]
                0.00    0.00      15/39          nnp::Settings::keywordExists(std::string const&) const [208]
                0.00    0.00      22/39          nnp::Settings::operator[](std::string const&) const [222]
[189]    0.0    0.00    0.00      39         std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::find(std::string const&) const [189]
-----------------------------------------------
                0.00    0.00      13/29          nnp::SymmetryFunction::initializePrintFormat() [433]
                0.00    0.00      16/29          nnp::SymmetryFunctionGroup::initializePrintFormat() [446]
[190]    0.0    0.00    0.00      29         std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, std::string> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::pair<std::string, std::string> > >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&) [190]
                0.00    0.00       2/2           std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_get_insert_unique_pos(std::string const&) [278]
-----------------------------------------------
                0.00    0.00       8/28          nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
                0.00    0.00       8/28          nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
                0.00    0.00      12/28          nnp::SymmetryFunctionGroupRadial::sortMembers() [237]
[191]    0.0    0.00    0.00      28         void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long>(unsigned long&&) [191]
-----------------------------------------------
                0.00    0.00      26/26          nnp::Element::setupSymmetryFunctionGroups() [261]
[192]    0.0    0.00    0.00      26         nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [192]
                0.00    0.00       8/44          void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&) [178]
                0.00    0.00       2/57          nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType) [155]
                0.00    0.00       2/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
                0.00    0.00       2/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00      24/24          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[193]    0.0    0.00    0.00      24         nnp::SymmetryFunctionRadial::setParameters(std::string const&) [193]
                0.00    0.00      48/508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00      24/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00      24/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00      24/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
                0.00    0.00      24/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00      24/24          nnp::Element::changeLengthUnitSymmetryFunctions(double) [262]
[194]    0.0    0.00    0.00      24         nnp::SymmetryFunctionRadial::changeLengthUnit(double) [194]
                0.00    0.00      24/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
-----------------------------------------------
                0.00    0.00      24/24          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[195]    0.0    0.00    0.00      24         nnp::SymmetryFunctionRadial::SymmetryFunctionRadial(nnp::ElementMap const&) [195]
                0.00    0.00      72/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00      24/50          nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
-----------------------------------------------
                0.00    0.00      24/24          nnp::Element::~Element() [232]
[196]    0.0    0.00    0.00      24         nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial() [196]
                0.00    0.00      24/64          std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
                0.00    0.00      24/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00      24/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00      24/24          nnp::Element::infoSymmetryFunctionParameters() const [275]
[197]    0.0    0.00    0.00      24         nnp::SymmetryFunctionRadial::parameterLine() const [197]
                0.00    0.00      48/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00      24/50          nnp::SymmetryFunction::getPrintFormat() const [171]
                0.00    0.00      24/10869       nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00      20/20          nnp::SymmetryFunctionAngularNarrow::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [205]
[198]    0.0    0.00    0.00      20         nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [198]
                0.00    0.00      20/40          nnp::getDerivativescosijk(double const*, double const*, double, double, double*, double (*) [9]) [185]
                0.00    0.00      20/20          nnp::getDerivativesRij2pRik2pRjk2(double const*, double const*, double const*, double, double*, double (*) [9]) [203]
                0.00    0.00      20/20          nnp::getDerivativesfc(double const*, double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [201]
-----------------------------------------------
                0.00    0.00      20/20          nnp::SymmetryFunctionAngularWide::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [204]
[199]    0.0    0.00    0.00      20         nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [199]
                0.00    0.00      20/40          nnp::getDerivativescosijk(double const*, double const*, double, double, double*, double (*) [9]) [185]
                0.00    0.00      20/20          nnp::getDerivativesRij2pRik2(double const*, double const*, double, double*, double (*) [9]) [202]
                0.00    0.00      20/20          nnp::getDerivativesfc(double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [200]
-----------------------------------------------
                0.00    0.00      20/20          nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [199]
[200]    0.0    0.00    0.00      20         nnp::getDerivativesfc(double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [200]
                0.00    0.00      40/100         nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const [136]
                0.00    0.00      20/120         nnp::build9From6ik(double const (*) [6], double (*) [9]) [126]
-----------------------------------------------
                0.00    0.00      20/20          nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [198]
[201]    0.0    0.00    0.00      20         nnp::getDerivativesfc(double const*, double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [201]
                0.00    0.00      60/100         nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const [136]
                0.00    0.00      20/120         nnp::build9From6ik(double const (*) [6], double (*) [9]) [126]
-----------------------------------------------
                0.00    0.00      20/20          nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [199]
[202]    0.0    0.00    0.00      20         nnp::getDerivativesRij2pRik2(double const*, double const*, double, double*, double (*) [9]) [202]
                0.00    0.00      40/280         nnp::getDerivativesRij(double const*, double*, double (*) [6]) [107]
                0.00    0.00      20/120         nnp::build9From6ik(double const (*) [6], double (*) [9]) [126]
-----------------------------------------------
                0.00    0.00      20/20          nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [198]
[203]    0.0    0.00    0.00      20         nnp::getDerivativesRij2pRik2pRjk2(double const*, double const*, double const*, double, double*, double (*) [9]) [203]
                0.00    0.00      60/280         nnp::getDerivativesRij(double const*, double*, double (*) [6]) [107]
                0.00    0.00      20/120         nnp::build9From6ik(double const (*) [6], double (*) [9]) [126]
-----------------------------------------------
                0.00    0.00      20/20          nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
[204]    0.0    0.00    0.00      20         nnp::SymmetryFunctionAngularWide::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [204]
                0.00    0.00      20/20          nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [199]
                0.00    0.00      20/40          nnp::setSecondDerivesijk(double (*) [9], int, int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [182]
-----------------------------------------------
                0.00    0.00      20/20          nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
[205]    0.0    0.00    0.00      20         nnp::SymmetryFunctionAngularNarrow::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const [205]
                0.00    0.00      20/20          nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [198]
                0.00    0.00      20/40          nnp::setSecondDerivesijk(double (*) [9], int, int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [182]
-----------------------------------------------
                0.00    0.00      18/18          getNumericHessian(nnp::Prediction&, double) [344]
[206]    0.0    0.00    0.00      18         nnp::Prediction::predict() [206]
                0.00    0.00      19/55          nnp::Structure::calculateNeighborList(double) [163]
                0.00    0.00      19/55          nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool) [159]
                0.00    0.00      19/118         nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const [129]
                0.00    0.00      19/59          nnp::Mode::calculateEnergy(nnp::Structure&) const [152]
                0.00    0.00      19/59          nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const [154]
                0.00    0.00      19/59          nnp::Mode::calculateForces(nnp::Structure&) const [153]
                0.00    0.00      19/59          nnp::Structure::toPhysicalUnits(double, double, double, double) [150]
                0.00    0.00      19/117         nnp::Mode::addEnergyOffset(nnp::Structure&, bool) [130]
                0.00    0.00      19/59          nnp::Structure::toNormalizedUnits(double, double, double, double) [151]
-----------------------------------------------
                0.00    0.00       8/16          nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
                0.00    0.00       8/16          nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
[207]    0.0    0.00    0.00      16         void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&) [207]
-----------------------------------------------
                0.00    0.00       1/15          nnp::Mode::setupDFTD3() [319]
                0.00    0.00       1/15          nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00       1/15          nnp::Mode::setupElements() [322]
                0.00    0.00       5/15          nnp::Mode::setupNormalization() [326]
                0.00    0.00       7/15          nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
[208]    0.0    0.00    0.00      15         nnp::Settings::keywordExists(std::string const&) const [208]
                0.00    0.00      15/39          std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::find(std::string const&) const [189]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[209]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [209]
                0.00    0.00      39/508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00      13/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00      13/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00      13/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
                0.00    0.00      13/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::changeLengthUnitSymmetryFunctions(double) [262]
[210]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularWide::changeLengthUnit(double) [210]
                0.00    0.00      13/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[211]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularWide::SymmetryFunctionAngularWide(nnp::ElementMap const&) [211]
                0.00    0.00      78/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00      13/50          nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::~Element() [232]
[212]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide() [212]
                0.00    0.00      13/64          std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
                0.00    0.00      13/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00      13/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[213]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [213]
                0.00    0.00      39/508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00      13/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00      13/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00      13/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
                0.00    0.00      13/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::changeLengthUnitSymmetryFunctions(double) [262]
[214]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularNarrow::changeLengthUnit(double) [214]
                0.00    0.00      13/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[215]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularNarrow::SymmetryFunctionAngularNarrow(nnp::ElementMap const&) [215]
                0.00    0.00      78/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00      13/50          nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [168]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::~Element() [232]
[216]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow() [216]
                0.00    0.00      13/64          std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
                0.00    0.00      13/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00      13/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::setupSymmetryFunctionGroups() [261]
[217]    0.0    0.00    0.00      13         nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [217]
                0.00    0.00       8/8           void std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularWide const* const&>(nnp::SymmetryFunctionAngularWide const* const&) [226]
                0.00    0.00       2/57          nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType) [155]
                0.00    0.00       2/107         nnp::CutoffFunction::setCutoffRadius(double) [134]
                0.00    0.00       2/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::infoSymmetryFunctionParameters() const [275]
[218]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularWide::parameterLine() const [218]
                0.00    0.00      39/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00      13/50          nnp::SymmetryFunction::getPrintFormat() const [171]
                0.00    0.00      13/10869       nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00      13/13          nnp::Element::infoSymmetryFunctionParameters() const [275]
[219]    0.0    0.00    0.00      13         nnp::SymmetryFunctionAngularNarrow::parameterLine() const [219]
                0.00    0.00      39/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00      13/50          nnp::SymmetryFunction::getPrintFormat() const [171]
                0.00    0.00      13/10869       nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00      12/12          nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [141]
[220]    0.0    0.00    0.00      12         void std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionRadial const* const&>(nnp::SymmetryFunctionRadial const* const&) [220]
-----------------------------------------------
                0.00    0.00      12/12          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
[221]    0.0    0.00    0.00      12         void std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> >::_M_emplace_back_aux<nnp::SymmetryFunction*>(nnp::SymmetryFunction*&&) [221]
-----------------------------------------------
                0.00    0.00       1/11          nnp::Mode::setupElementMap() [323]
                0.00    0.00       1/11          nnp::Mode::setupCutoff() [320]
                0.00    0.00       1/11          nnp::Mode::setupElements() [322]
                0.00    0.00       2/11          nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00       3/11          nnp::Mode::setupNormalization() [326]
                0.00    0.00       3/11          nnp::Mode::setupNeuralNetwork() [325]
[222]    0.0    0.00    0.00      11         nnp::Settings::operator[](std::string const&) const [222]
                0.00    0.00      22/39          std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::find(std::string const&) const [189]
-----------------------------------------------
                0.00    0.00       1/9           nnp::Mode::loadSettingsFile(std::string const&) [324]
                0.00    0.00       2/9           nnp::Mode::setupSymmetryFunctionGroups() [329]
                0.00    0.00       2/9           nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00       2/9           nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00       2/9           nnp::Mode::setupSymmetryFunctions() [327]
[223]    0.0    0.00    0.00       9         nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
                0.00    0.00     280/7963        nnp::Log::addLogEntry(std::string const&) [71]
-----------------------------------------------
                0.00    0.00       2/8           nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
                0.00    0.00       2/8           nnp::Mode::setupElementMap() [323]
                0.00    0.00       4/8           void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)) [clone .constprop.93] [342]
[224]    0.0    0.00    0.00       8         nnp::ElementMap::atomicNumber(std::string const&) [224]
-----------------------------------------------
                0.00    0.00       8/8           nnp::NeuralNetwork::NeuralNetwork(int, int const* const&, nnp::NeuralNetwork::ActivationFunction const* const&) [248]
[225]    0.0    0.00    0.00       8         nnp::NeuralNetwork::allocateLayer(nnp::NeuralNetwork::Layer&, int, int, nnp::NeuralNetwork::ActivationFunction) [225]
-----------------------------------------------
                0.00    0.00       8/8           nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [217]
[226]    0.0    0.00    0.00       8         void std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularWide const* const&>(nnp::SymmetryFunctionAngularWide const* const&) [226]
-----------------------------------------------
                0.00    0.00       4/8           nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
                0.00    0.00       4/8           nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
[227]    0.0    0.00    0.00       8         std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool) [227]
-----------------------------------------------
                0.00    0.00       2/7           nnp::SymmetryFunctionGroupAngularWide::SymmetryFunctionGroupAngularWide(nnp::ElementMap const&) [253]
                0.00    0.00       2/7           nnp::SymmetryFunctionGroupAngularNarrow::SymmetryFunctionGroupAngularNarrow(nnp::ElementMap const&) [257]
                0.00    0.00       3/7           nnp::SymmetryFunctionGroupRadial::SymmetryFunctionGroupRadial(nnp::ElementMap const&) [239]
[228]    0.0    0.00    0.00       7         nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
                0.00    0.00      49/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00       7/117         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00       7/117         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                0.00    0.00       7/57          nnp::CutoffFunction::CutoffFunction() [156]
-----------------------------------------------
                0.00    0.00       2/7           nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00       2/7           nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
                0.00    0.00       3/7           nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
[229]    0.0    0.00    0.00       7         nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
                0.00    0.00     171/1443        std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const [89]
                0.00    0.00     106/3124        std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const [77]
                0.00    0.00      59/531         std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.107] [99]
-----------------------------------------------
                0.00    0.00       7/7           nnp::Element::infoSymmetryFunctionGroups() const [273]
[230]    0.0    0.00    0.00       7         void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag) [230]
-----------------------------------------------
                0.00    0.00       6/6           nnp::Element::setupSymmetryFunctionGroups() [261]
[231]    0.0    0.00    0.00       6         void std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> >::_M_emplace_back_aux<nnp::SymmetryFunctionGroup*>(nnp::SymmetryFunctionGroup*&&) [231]
-----------------------------------------------
                0.00    0.00       1/5           void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&) [277]
                0.00    0.00       2/5           nnp::Prediction::~Prediction() [363]
                0.00    0.00       2/5           nnp::Mode::setupElements() [322]
[232]    0.0    0.00    0.00       5         nnp::Element::~Element() [232]
                0.00    0.00      24/24          nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial() [196]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide() [212]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow() [216]
                0.00    0.00       5/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00       5/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
                0.00    0.00       5/5           std::_Rb_tree<unsigned long, std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container>, std::_Select1st<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >*) [234]
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial() [240]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide() [254]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow() [258]
                0.00    0.00       2/2           nnp::NeuralNetwork::~NeuralNetwork() [249]
-----------------------------------------------
                0.00    0.00       5/5           std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::~map() [765]
[233]    0.0    0.00    0.00       5         std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::string> >*) [233]
-----------------------------------------------
                0.00    0.00       5/5           nnp::Element::~Element() [232]
[234]    0.0    0.00    0.00       5         std::_Rb_tree<unsigned long, std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container>, std::_Select1st<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >*) [234]
-----------------------------------------------
                0.00    0.00       4/4           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153] [284]
[235]    0.0    0.00    0.00       4         nnp::SymmetryFunctionGroupAngularWide::operator<(nnp::SymmetryFunctionGroup const&) const [235]
-----------------------------------------------
                0.00    0.00       4/4           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153] [284]
[236]    0.0    0.00    0.00       4         nnp::SymmetryFunctionGroupAngularNarrow::operator<(nnp::SymmetryFunctionGroup const&) const [236]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Element::setupSymmetryFunctionGroups() [261]
[237]    0.0    0.00    0.00       3         nnp::SymmetryFunctionGroupRadial::sortMembers() [237]
                0.00    0.00      24/158         void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&) [122]
                0.00    0.00      12/28          void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long>(unsigned long&&) [191]
                0.00    0.00       3/3           void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.139] [245]
                0.00    0.00       3/3           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.151] [244]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const [269]
[238]    0.0    0.00    0.00       3         nnp::SymmetryFunctionGroupRadial::setScalingFactors() [238]
                0.00    0.00       3/234         std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&) [111]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Element::setupSymmetryFunctionGroups() [261]
[239]    0.0    0.00    0.00       3         nnp::SymmetryFunctionGroupRadial::SymmetryFunctionGroupRadial(nnp::ElementMap const&) [239]
                0.00    0.00      15/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00       3/7           nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Element::~Element() [232]
[240]    0.0    0.00    0.00       3         nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial() [240]
                0.00    0.00       6/64          std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
                0.00    0.00       3/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00       3/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00       1/3           nnp::Mode::setupDFTD3() [319]
                0.00    0.00       2/3           nnp::Mode::Mode() [331]
[241]    0.0    0.00    0.00       3         nnp::DFTD3::DFTD3() [241]
-----------------------------------------------
                0.00    0.00       3/3           nnp::Element::infoSymmetryFunctionGroups() const [273]
[242]    0.0    0.00    0.00       3         nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
                0.00    0.00      27/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00      24/50          nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
                0.00    0.00      15/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
                0.00    0.00       6/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00       3/7           nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
-----------------------------------------------
                0.00    0.00       1/3           nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00       2/3           nnp::Mode::setupNeuralNetwork() [325]
[243]    0.0    0.00    0.00       3         std::vector<std::string, std::allocator<std::string> >::~vector() [243]
-----------------------------------------------
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::sortMembers() [237]
[244]    0.0    0.00    0.00       3         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.151] [244]
                0.00    0.00      42/168         nnp::SymmetryFunctionRadial::operator<(nnp::SymmetryFunction const&) const [117]
-----------------------------------------------
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::sortMembers() [237]
[245]    0.0    0.00    0.00       3         void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.139] [245]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
[246]    0.0    0.00    0.00       2         nnp::NeuralNetwork::setConnections(double const* const&) [246]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupNeuralNetwork() [325]
[247]    0.0    0.00    0.00       2         nnp::NeuralNetwork::setNormalizeNeurons(bool) [247]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupNeuralNetwork() [325]
[248]    0.0    0.00    0.00       2         nnp::NeuralNetwork::NeuralNetwork(int, int const* const&, nnp::NeuralNetwork::ActivationFunction const* const&) [248]
                0.00    0.00       8/8           nnp::NeuralNetwork::allocateLayer(nnp::NeuralNetwork::Layer&, int, int, nnp::NeuralNetwork::ActivationFunction) [225]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::~Element() [232]
[249]    0.0    0.00    0.00       2         nnp::NeuralNetwork::~NeuralNetwork() [249]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
[250]    0.0    0.00    0.00       2         nnp::SymmetryFunctionStatistics::SymmetryFunctionStatistics() [250]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
[251]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
                0.00    0.00      56/158         void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&) [122]
                0.00    0.00       8/16          void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&) [207]
                0.00    0.00       8/28          void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long>(unsigned long&&) [191]
                0.00    0.00       4/8           std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool) [227]
                0.00    0.00       2/2           void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.185] [285]
                0.00    0.00       2/2           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.197] [281]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const [269]
[252]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularWide::setScalingFactors() [252]
                0.00    0.00       2/234         std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&) [111]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
[253]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularWide::SymmetryFunctionGroupAngularWide(nnp::ElementMap const&) [253]
                0.00    0.00      18/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00       2/7           nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::~Element() [232]
[254]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide() [254]
                0.00    0.00       4/64          std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
                0.00    0.00       2/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00       2/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
[255]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
                0.00    0.00      56/158         void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&) [122]
                0.00    0.00       8/16          void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&) [207]
                0.00    0.00       8/28          void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long>(unsigned long&&) [191]
                0.00    0.00       4/8           std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool) [227]
                0.00    0.00       2/2           void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.185] [286]
                0.00    0.00       2/2           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.197] [282]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const [269]
[256]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularNarrow::setScalingFactors() [256]
                0.00    0.00       2/234         std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&) [111]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
[257]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularNarrow::SymmetryFunctionGroupAngularNarrow(nnp::ElementMap const&) [257]
                0.00    0.00      18/678         std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&) [97]
                0.00    0.00       2/7           nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [228]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::~Element() [232]
[258]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow() [258]
                0.00    0.00       4/64          std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [145]
                0.00    0.00       2/119         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [128]
                0.00    0.00       2/119         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [127]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[259]    0.0    0.00    0.00       2         nnp::Element::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [259]
                0.00    0.00      50/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
                0.00    0.00      50/50          nnp::SymmetryFunction::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [167]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[260]    0.0    0.00    0.00       2         nnp::Element::sortSymmetryFunctions() [260]
                0.00    0.00      46/73          nnp::SymmetryFunctionAngularWide::operator<(nnp::SymmetryFunction const&) const [140]
                0.00    0.00      28/77          nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const [139]
                0.00    0.00       2/2           void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156] [287]
                0.00    0.00       2/2           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168] [283]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctionGroups() [329]
[261]    0.0    0.00    0.00       2         nnp::Element::setupSymmetryFunctionGroups() [261]
                0.00    0.00      72/72          nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [141]
                0.00    0.00      26/26          nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [192]
                0.00    0.00      13/13          nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [217]
                0.00    0.00       6/6           void std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> >::_M_emplace_back_aux<nnp::SymmetryFunctionGroup*>(nnp::SymmetryFunctionGroup*&&) [231]
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::SymmetryFunctionGroupRadial(nnp::ElementMap const&) [239]
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::sortMembers() [237]
                0.00    0.00       2/2           void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.141] [288]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::SymmetryFunctionGroupAngularNarrow(nnp::ElementMap const&) [257]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::SymmetryFunctionGroupAngularWide(nnp::ElementMap const&) [253]
                0.00    0.00       2/2           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153] [284]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[262]    0.0    0.00    0.00       2         nnp::Element::changeLengthUnitSymmetryFunctions(double) [262]
                0.00    0.00      50/157         nnp::CutoffFunction::setCutoffParameter(double) [123]
                0.00    0.00      24/24          nnp::SymmetryFunctionRadial::changeLengthUnit(double) [194]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularWide::changeLengthUnit(double) [210]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularNarrow::changeLengthUnit(double) [214]
-----------------------------------------------
                0.00    0.00       2/2           void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&) [277]
[263]    0.0    0.00    0.00       2         nnp::Element::Element(nnp::Element const&) [263]
                0.00    0.00       2/117         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00       2/117         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupElements() [322]
[264]    0.0    0.00    0.00       2         nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
                0.00    0.00       4/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00       2/2           nnp::SymmetryFunctionStatistics::SymmetryFunctionStatistics() [250]
                0.00    0.00       2/117         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00       2/117         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                0.00    0.00       2/8           nnp::ElementMap::atomicNumber(std::string const&) [224]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupNeuralNetwork() [325]
[265]    0.0    0.00    0.00       2         nnp::NeuralNetwork::info() const [265]
                0.00    0.00     178/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00      15/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
-----------------------------------------------
                0.00    0.00       2/2           void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153] [284]
[266]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupRadial::operator<(nnp::SymmetryFunctionGroup const&) const [266]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::infoSymmetryFunctionGroups() const [273]
[267]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00      15/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00      13/50          nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
                0.00    0.00       8/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
                0.00    0.00       6/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00       2/7           nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::infoSymmetryFunctionGroups() const [273]
[268]    0.0    0.00    0.00       2         nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
                0.00    0.00      15/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00      13/50          nnp::SymmetryFunctionGroup::getPrintFormatMember() const [172]
                0.00    0.00       8/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
                0.00    0.00       6/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00       2/7           nnp::SymmetryFunctionGroup::getPrintFormatCommon() const [229]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
[269]    0.0    0.00    0.00       2         nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const [269]
                0.00    0.00      50/50          nnp::SymmetryFunction::setScalingType(nnp::SymmetryFunction::ScalingType, std::string, double, double) [166]
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::setScalingFactors() [238]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::setScalingFactors() [252]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::setScalingFactors() [256]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[270]    0.0    0.00    0.00       2         nnp::Element::getMinNeighbors() const [270]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[271]    0.0    0.00    0.00       2         nnp::Element::getMaxCutoffRadius() const [271]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[272]    0.0    0.00    0.00       2         nnp::Element::getMinCutoffRadius() const [272]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctionGroups() [329]
[273]    0.0    0.00    0.00       2         nnp::Element::infoSymmetryFunctionGroups() const [273]
                0.00    0.00       7/7           void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag) [230]
                0.00    0.00       3/3           nnp::SymmetryFunctionGroupRadial::parameterLines() const [242]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::parameterLines() const [267]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const [268]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
[274]    0.0    0.00    0.00       2         nnp::Element::infoSymmetryFunctionScaling() const [274]
                0.00    0.00      50/50          nnp::SymmetryFunction::scalingLine() const [170]
                0.00    0.00      12/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupSymmetryFunctions() [327]
[275]    0.0    0.00    0.00       2         nnp::Element::infoSymmetryFunctionParameters() const [275]
                0.00    0.00      24/24          nnp::SymmetryFunctionRadial::parameterLine() const [197]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularWide::parameterLine() const [218]
                0.00    0.00      13/13          nnp::SymmetryFunctionAngularNarrow::parameterLine() const [219]
                0.00    0.00      12/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
-----------------------------------------------
                0.00    0.00       1/2           nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00       1/2           nnp::Mode::setupElements() [322]
[276]    0.0    0.00    0.00       2         nnp::Settings::getValues(std::string const&) const [276]
                0.00    0.00       2/39          std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::find(std::string const&) const [189]
                0.00    0.00       2/67          std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::equal_range(std::string const&) const [143]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Mode::setupElements() [322]
[277]    0.0    0.00    0.00       2         void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&) [277]
                0.00    0.00       2/2           nnp::Element::Element(nnp::Element const&) [263]
                0.00    0.00       1/117         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [132]
                0.00    0.00       1/117         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [133]
                0.00    0.00       1/5           nnp::Element::~Element() [232]
-----------------------------------------------
                0.00    0.00       2/2           std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, std::string> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::pair<std::string, std::string> > >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&) [190]
[278]    0.0    0.00    0.00       2         std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_get_insert_unique_pos(std::string const&) [278]
-----------------------------------------------
                0.00    0.00       2/2           nnp::ElementMap::registerElements(std::string const&) [313]
[279]    0.0    0.00    0.00       2         std::_Rb_tree_iterator<std::pair<std::string const, unsigned long> > std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, unsigned long> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [279]
                0.00    0.00       1/1           std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_get_insert_unique_pos(std::string const&) [341]
-----------------------------------------------
                0.00    0.00       2/2           nnp::ElementMap::registerElements(std::string const&) [313]
[280]    0.0    0.00    0.00       2         std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::string> >, unsigned long const&) [280]
-----------------------------------------------
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
[281]    0.0    0.00    0.00       2         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.197] [281]
                0.00    0.00      22/73          nnp::SymmetryFunctionAngularWide::operator<(nnp::SymmetryFunction const&) const [140]
-----------------------------------------------
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
[282]    0.0    0.00    0.00       2         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.197] [282]
                0.00    0.00      22/77          nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const [139]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::sortSymmetryFunctions() [260]
[283]    0.0    0.00    0.00       2         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168] [283]
                0.00    0.00      84/168         nnp::SymmetryFunctionRadial::operator<(nnp::SymmetryFunction const&) const [117]
                0.00    0.00      13/77          nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const [139]
                0.00    0.00       5/73          nnp::SymmetryFunctionAngularWide::operator<(nnp::SymmetryFunction const&) const [140]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
[284]    0.0    0.00    0.00       2         void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153] [284]
                0.00    0.00       4/4           nnp::SymmetryFunctionGroupAngularWide::operator<(nnp::SymmetryFunctionGroup const&) const [235]
                0.00    0.00       4/4           nnp::SymmetryFunctionGroupAngularNarrow::operator<(nnp::SymmetryFunctionGroup const&) const [236]
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupRadial::operator<(nnp::SymmetryFunctionGroup const&) const [266]
-----------------------------------------------
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularWide::sortMembers() [251]
[285]    0.0    0.00    0.00       2         void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.185] [285]
-----------------------------------------------
                0.00    0.00       2/2           nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [255]
[286]    0.0    0.00    0.00       2         void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.185] [286]
-----------------------------------------------
                                   2             void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156] [287]
                0.00    0.00       2/2           nnp::Element::sortSymmetryFunctions() [260]
[287]    0.0    0.00    0.00       2+2       void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156] [287]
                0.00    0.00      42/168         nnp::SymmetryFunctionRadial::operator<(nnp::SymmetryFunction const&) const [117]
                0.00    0.00      14/77          nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const [139]
                                   2             void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156] [287]
-----------------------------------------------
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
[288]    0.0    0.00    0.00       2         void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.141] [288]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[289]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z22createKnownKeywordsMapv [289]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[290]    0.0    0.00    0.00       1         _GLOBAL__sub_I__Z6timingRdS_ [290]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[291]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp10ElementMap13knownElementsE [291]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[292]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp10PredictionC2Ev [292]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[293]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp10new1DtableEi [293]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[294]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp11DerivativesC2Ev [294]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[295]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp13NeuralNetworkC2EiRKPKiRKPKNS0_18ActivationFunctionE [295]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[296]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp16SymmetryFunction11sfinfoWidthE [296]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[297]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp21SymmetryFunctionGroup11printFormatE [297]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[298]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp22SymmetryFunctionRadialC2ERKNS_10ElementMapE [298]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[299]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp27SymmetryFunctionAngularWideC2ERKNS_10ElementMapE [299]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[300]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp27SymmetryFunctionGroupRadialC2ERKNS_10ElementMapE [300]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[301]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp29SymmetryFunctionAngularNarrowC2ERKNS_10ElementMapE [301]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[302]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp30SymmetryFunctionWeightedRadialC2ERKNS_10ElementMapE [302]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[303]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp31SymmetryFunctionWeightedAngularC2ERKNS_10ElementMapE [303]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[304]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp32SymmetryFunctionGroupAngularWideC2ERKNS_10ElementMapE [304]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[305]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp34SymmetryFunctionGroupAngularNarrowC2ERKNS_10ElementMapE [305]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[306]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp35SymmetryFunctionGroupWeightedRadialC2ERKNS_10ElementMapE [306]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[307]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp36SymmetryFunctionGroupWeightedAngularC2ERKNS_10ElementMapE [307]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[308]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp3LogC2Ev [308]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[309]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp4ModeC2Ev [309]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[310]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp5DFTD3C2Ev [310]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[311]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp7ElementC2EmRKNS_10ElementMapE [311]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [830]
[312]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3nnp9StructureC2Ev [312]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupElementMap() [323]
[313]    0.0    0.00    0.00       1         nnp::ElementMap::registerElements(std::string const&) [313]
                0.00    0.00       2/2           std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::string> >, unsigned long const&) [280]
                0.00    0.00       2/2           std::_Rb_tree_iterator<std::pair<std::string const, unsigned long> > std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, unsigned long> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [279]
                0.00    0.00       1/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00       1/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00       1/1           void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)) [clone .constprop.81] [343]
                0.00    0.00       1/1           void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)) [clone .constprop.93] [342]
-----------------------------------------------
                0.00    0.00       1/1           getNumericThird(nnp::Prediction&, double) [6]
[314]    0.0    0.00    0.00       1         nnp::new3Dtable(int) [314]
-----------------------------------------------
                0.00    0.00       1/1           getNumericFourth(nnp::Prediction&, double) [7]
[315]    0.0    0.00    0.00       1         nnp::new4Dtable(int) [315]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::getHessian() [40]
[316]    0.0    0.00    0.00       1         nnp::toPhysicalUnits(double*, unsigned long, double, double) [316]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::Mode() [331]
[317]    0.0    0.00    0.00       1         nnp::Log::Log() [317]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::setup() [361]
[318]    0.0    0.00    0.00       1         nnp::Mode::initialize() [318]
                0.00    0.00      12/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       1/10869       nnp::strpr(char const*, ...) [60]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[319]    0.0    0.00    0.00       1         nnp::Mode::setupDFTD3() [319]
                0.00    0.00       1/15          nnp::Settings::keywordExists(std::string const&) const [208]
                0.00    0.00       1/3           nnp::DFTD3::DFTD3() [241]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[320]    0.0    0.00    0.00       1         nnp::Mode::setupCutoff() [320]
                0.00    0.00       9/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       2/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       1/11          nnp::Settings::operator[](std::string const&) const [222]
                0.00    0.00       1/2433        nnp::split(std::string const&, char) [81]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::setup() [361]
[321]    0.0    0.00    0.00       1         nnp::Mode::setupGeneric() [321]
                0.00    0.00       1/1           nnp::Mode::setupElementMap() [323]
                0.00    0.00       1/1           nnp::Mode::setupNormalization() [326]
                0.00    0.00       1/1           nnp::Mode::setupElements() [322]
                0.00    0.00       1/1           nnp::Mode::setupDFTD3() [319]
                0.00    0.00       1/1           nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00       1/1           nnp::Mode::setupCutoff() [320]
                0.00    0.00       1/1           nnp::Mode::setupSymmetryFunctionGroups() [329]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[322]    0.0    0.00    0.00       1         nnp::Mode::setupElements() [322]
                0.00    0.00       9/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       3/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/2           nnp::Element::Element(unsigned long, nnp::ElementMap const&) [264]
                0.00    0.00       2/5           nnp::Element::~Element() [232]
                0.00    0.00       2/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00       2/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00       2/508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00       2/2           void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&) [277]
                0.00    0.00       1/11          nnp::Settings::operator[](std::string const&) const [222]
                0.00    0.00       1/15          nnp::Settings::keywordExists(std::string const&) const [208]
                0.00    0.00       1/2           nnp::Settings::getValues(std::string const&) const [276]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[323]    0.0    0.00    0.00       1         nnp::Mode::setupElementMap() [323]
                0.00    0.00       7/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       4/28907       nnp::ElementMap::symbol(unsigned long) const [57]
                0.00    0.00       3/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/8           nnp::ElementMap::atomicNumber(std::string const&) [224]
                0.00    0.00       1/11          nnp::Settings::operator[](std::string const&) const [222]
                0.00    0.00       1/1           nnp::ElementMap::registerElements(std::string const&) [313]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::setup() [361]
[324]    0.0    0.00    0.00       1         nnp::Mode::loadSettingsFile(std::string const&) [324]
                0.00    0.00       4/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       1/1           nnp::Settings::parseLines() [332]
                0.00    0.00       1/1           nnp::Settings::loadFile(std::string const&) [334]
                0.00    0.00       1/1           nnp::Settings::info() const [337]
                0.00    0.00       1/9           nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::setup() [361]
[325]    0.0    0.00    0.00       1         nnp::Mode::setupNeuralNetwork() [325]
                0.00    0.00      10/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       3/11          nnp::Settings::operator[](std::string const&) const [222]
                0.00    0.00       3/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00       2/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00       2/2           nnp::NeuralNetwork::NeuralNetwork(int, int const* const&, nnp::NeuralNetwork::ActivationFunction const* const&) [248]
                0.00    0.00       2/2           nnp::NeuralNetwork::setNormalizeNeurons(bool) [247]
                0.00    0.00       2/2           nnp::NeuralNetwork::info() const [265]
                0.00    0.00       2/9           nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
                0.00    0.00       2/3           std::vector<std::string, std::allocator<std::string> >::~vector() [243]
                0.00    0.00       1/15          nnp::Settings::keywordExists(std::string const&) const [208]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[326]    0.0    0.00    0.00       1         nnp::Mode::setupNormalization() [326]
                0.00    0.00      12/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       5/15          nnp::Settings::keywordExists(std::string const&) const [208]
                0.00    0.00       4/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       3/11          nnp::Settings::operator[](std::string const&) const [222]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[327]    0.0    0.00    0.00       1         nnp::Mode::setupSymmetryFunctions() [327]
                0.00    0.00      50/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00      50/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00      50/508         nnp::ElementMap::index(std::string const&) const [101]
                0.00    0.00      50/50          nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [169]
                0.00    0.00      33/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       5/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/2           nnp::Element::sortSymmetryFunctions() [260]
                0.00    0.00       2/2           nnp::Element::getMaxCutoffRadius() const [271]
                0.00    0.00       2/2           nnp::Element::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [259]
                0.00    0.00       2/2           nnp::Element::infoSymmetryFunctionParameters() const [275]
                0.00    0.00       2/9           nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
                0.00    0.00       2/2           nnp::Element::getMinNeighbors() const [270]
                0.00    0.00       2/2           nnp::Element::getMinCutoffRadius() const [272]
                0.00    0.00       2/2           nnp::Element::changeLengthUnitSymmetryFunctions(double) [262]
                0.00    0.00       1/2           nnp::Settings::getValues(std::string const&) const [276]
                0.00    0.00       1/234         std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&) [111]
                0.00    0.00       1/56          std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&) [157]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::setup() [361]
[328]    0.0    0.00    0.00       1         nnp::Mode::setupNeuralNetworkWeights(std::string const&) [328]
                0.00    0.00    1292/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00    1292/2433        nnp::split(std::string const&, char) [81]
                0.00    0.00      22/158         void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&) [122]
                0.00    0.00       7/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       5/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/2           nnp::NeuralNetwork::setConnections(double const* const&) [246]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::setupGeneric() [321]
[329]    0.0    0.00    0.00       1         nnp::Mode::setupSymmetryFunctionGroups() [329]
                0.00    0.00      33/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       2/2           nnp::Element::setupSymmetryFunctionGroups() [261]
                0.00    0.00       2/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/9           nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
                0.00    0.00       2/2           nnp::Element::infoSymmetryFunctionGroups() const [273]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::setup() [361]
[330]    0.0    0.00    0.00       1         nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [330]
                0.00    0.00      34/7651        nnp::Log::operator<<(std::string const&) [72]
                0.00    0.00       7/15          nnp::Settings::keywordExists(std::string const&) const [208]
                0.00    0.00       7/8925        void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&) [68]
                0.00    0.00       6/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/2           nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const [269]
                0.00    0.00       2/2           nnp::Element::infoSymmetryFunctionScaling() const [274]
                0.00    0.00       2/9           nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [223]
                0.00    0.00       2/11          nnp::Settings::operator[](std::string const&) const [222]
                0.00    0.00       1/3           std::vector<std::string, std::allocator<std::string> >::~vector() [243]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::Prediction() [362]
[331]    0.0    0.00    0.00       1         nnp::Mode::Mode() [331]
                0.00    0.00       2/3           nnp::DFTD3::DFTD3() [241]
                0.00    0.00       1/1           nnp::Log::Log() [317]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::loadSettingsFile(std::string const&) [324]
[332]    0.0    0.00    0.00       1         nnp::Settings::parseLines() [332]
                0.00    0.00     105/2537        nnp::reduce(std::string const&, std::string const&, std::string const&) [80]
                0.00    0.00     105/105         std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, unsigned long> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_insert_equal<std::pair<std::string, std::pair<std::string, unsigned long> > >(std::pair<std::string, std::pair<std::string, unsigned long> >&&) [135]
                0.00    0.00       1/1           nnp::Settings::sanityCheck() [333]
                0.00    0.00       1/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       1/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Settings::parseLines() [332]
[333]    0.0    0.00    0.00       1         nnp::Settings::sanityCheck() [333]
                0.00    0.00      65/67          std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::equal_range(std::string const&) const [143]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::loadSettingsFile(std::string const&) [324]
[334]    0.0    0.00    0.00       1         nnp::Settings::loadFile(std::string const&) [334]
                0.00    0.00       1/1           nnp::Settings::readFile() [335]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Settings::loadFile(std::string const&) [334]
[335]    0.0    0.00    0.00       1         nnp::Settings::readFile() [335]
                0.00    0.00       9/8925        void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&) [68]
                0.00    0.00       2/10869       nnp::strpr(char const*, ...) [60]
                0.00    0.00       2/83          void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&) [138]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Prediction::Prediction() [362]
[336]    0.0    0.00    0.00       1         nnp::Structure::Structure() [336]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::loadSettingsFile(std::string const&) [324]
[337]    0.0    0.00    0.00       1         nnp::Settings::info() const [337]
-----------------------------------------------
                0.00    0.00       1/1           nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const [39]
[338]    0.0    0.00    0.00       1         std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >::~vector() [338]
-----------------------------------------------
                                   1             std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, unsigned long> > >*) [339]
                0.00    0.00       1/1           nnp::Prediction::~Prediction() [363]
[339]    0.0    0.00    0.00       1+1       std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, unsigned long> > >*) [339]
                                   1             std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, unsigned long> > >*) [339]
-----------------------------------------------
                0.00    0.00       1/1           std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&) [144]
[340]    0.0    0.00    0.00       1         std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&) [340]
-----------------------------------------------
                0.00    0.00       1/1           std::_Rb_tree_iterator<std::pair<std::string const, unsigned long> > std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, unsigned long> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [279]
[341]    0.0    0.00    0.00       1         std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_get_insert_unique_pos(std::string const&) [341]
-----------------------------------------------
                0.00    0.00       1/1           nnp::ElementMap::registerElements(std::string const&) [313]
[342]    0.0    0.00    0.00       1         void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)) [clone .constprop.93] [342]
                0.00    0.00       4/8           nnp::ElementMap::atomicNumber(std::string const&) [224]
-----------------------------------------------
                0.00    0.00       1/1           nnp::ElementMap::registerElements(std::string const&) [313]
[343]    0.0    0.00    0.00       1         void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)) [clone .constprop.81] [343]
-----------------------------------------------
                                  29             std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, std::string> > >*) [779]
[779]    0.0    0.00    0.00       0+29      std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, std::string> > >*) [779]
                                  29             std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, std::string> > >*) [779]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [289] _GLOBAL__sub_I__Z22createKnownKeywordsMapv [184] nnp::getDerivativescosijk(double const*, double const*, double*, double (*) [9]) [106] nnp::NeuralNetwork::getOutput(double*) const
 [290] _GLOBAL__sub_I__Z6timingRdS_ [185] nnp::getDerivativescosijk(double const*, double const*, double, double, double*, double (*) [9]) [136] nnp::CutoffFunction::get12Derivatives(double const*, double*, double (*) [6]) const
 [291] _GLOBAL__sub_I__ZN3nnp10ElementMap13knownElementsE [228] nnp::SymmetryFunctionGroup::SymmetryFunctionGroup(unsigned long, nnp::ElementMap const&) [176] nnp::CutoffFunction::fTANHU(double) const
 [292] _GLOBAL__sub_I__ZN3nnp10PredictionC2Ev [193] nnp::SymmetryFunctionRadial::setParameters(std::string const&) [59] nnp::CutoffFunction::dnfTANHU(double, int) const
 [293] _GLOBAL__sub_I__ZN3nnp10new1DtableEi [194] nnp::SymmetryFunctionRadial::changeLengthUnit(double) [113] nnp::CutoffFunction::fdfTANHU(double, double&, double&) const
 [294] _GLOBAL__sub_I__ZN3nnp11DerivativesC2Ev [195] nnp::SymmetryFunctionRadial::SymmetryFunctionRadial(nnp::ElementMap const&) [170] nnp::SymmetryFunction::scalingLine() const
 [295] _GLOBAL__sub_I__ZN3nnp13NeuralNetworkC2EiRKPKiRKPKNS0_18ActivationFunctionE [196] nnp::SymmetryFunctionRadial::~SymmetryFunctionRadial() [171] nnp::SymmetryFunction::getPrintFormat() const
 [296] _GLOBAL__sub_I__ZN3nnp16SymmetryFunction11sfinfoWidthE [202] nnp::getDerivativesRij2pRik2(double const*, double const*, double, double*, double (*) [9]) [83] nnp::SymmetryFunction::scale(double) const
 [297] _GLOBAL__sub_I__ZN3nnp21SymmetryFunctionGroup11printFormatE [250] nnp::SymmetryFunctionStatistics::SymmetryFunctionStatistics() [75] nnp::SymmetryFunction::unscale(double) const
 [298] _GLOBAL__sub_I__ZN3nnp22SymmetryFunctionRadialC2ERKNS_10ElementMapE [209] nnp::SymmetryFunctionAngularWide::setParameters(std::string const&) [229] nnp::SymmetryFunctionGroup::getPrintFormatCommon() const
 [299] _GLOBAL__sub_I__ZN3nnp27SymmetryFunctionAngularWideC2ERKNS_10ElementMapE [210] nnp::SymmetryFunctionAngularWide::changeLengthUnit(double) [172] nnp::SymmetryFunctionGroup::getPrintFormatMember() const
 [300] _GLOBAL__sub_I__ZN3nnp27SymmetryFunctionGroupRadialC2ERKNS_10ElementMapE [211] nnp::SymmetryFunctionAngularWide::SymmetryFunctionAngularWide(nnp::ElementMap const&) [197] nnp::SymmetryFunctionRadial::parameterLine() const
 [301] _GLOBAL__sub_I__ZN3nnp29SymmetryFunctionAngularNarrowC2ERKNS_10ElementMapE [212] nnp::SymmetryFunctionAngularWide::~SymmetryFunctionAngularWide() [26] nnp::SymmetryFunctionRadial::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const
 [302] _GLOBAL__sub_I__ZN3nnp30SymmetryFunctionWeightedRadialC2ERKNS_10ElementMapE [237] nnp::SymmetryFunctionGroupRadial::sortMembers() [186] nnp::SymmetryFunctionRadial::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const
 [303] _GLOBAL__sub_I__ZN3nnp31SymmetryFunctionWeightedAngularC2ERKNS_10ElementMapE [238] nnp::SymmetryFunctionGroupRadial::setScalingFactors() [117] nnp::SymmetryFunctionRadial::operator<(nnp::SymmetryFunction const&) const
 [304] _GLOBAL__sub_I__ZN3nnp32SymmetryFunctionGroupAngularWideC2ERKNS_10ElementMapE [141] nnp::SymmetryFunctionGroupRadial::addMember(nnp::SymmetryFunction const*) [218] nnp::SymmetryFunctionAngularWide::parameterLine() const
 [305] _GLOBAL__sub_I__ZN3nnp34SymmetryFunctionGroupAngularNarrowC2ERKNS_10ElementMapE [239] nnp::SymmetryFunctionGroupRadial::SymmetryFunctionGroupRadial(nnp::ElementMap const&) [20] nnp::SymmetryFunctionAngularWide::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const
 [306] _GLOBAL__sub_I__ZN3nnp35SymmetryFunctionGroupWeightedRadialC2ERKNS_10ElementMapE [240] nnp::SymmetryFunctionGroupRadial::~SymmetryFunctionGroupRadial() [204] nnp::SymmetryFunctionAngularWide::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const
 [307] _GLOBAL__sub_I__ZN3nnp36SymmetryFunctionGroupWeightedAngularC2ERKNS_10ElementMapE [203] nnp::getDerivativesRij2pRik2pRjk2(double const*, double const*, double const*, double, double*, double (*) [9]) [140] nnp::SymmetryFunctionAngularWide::operator<(nnp::SymmetryFunction const&) const
 [308] _GLOBAL__sub_I__ZN3nnp3LogC2Ev [213] nnp::SymmetryFunctionAngularNarrow::setParameters(std::string const&) [242] nnp::SymmetryFunctionGroupRadial::parameterLines() const
 [309] _GLOBAL__sub_I__ZN3nnp4ModeC2Ev [214] nnp::SymmetryFunctionAngularNarrow::changeLengthUnit(double) [124] nnp::SymmetryFunctionGroupRadial::calculate(nnp::Atom&, bool) const
 [310] _GLOBAL__sub_I__ZN3nnp5DFTD3C2Ev [215] nnp::SymmetryFunctionAngularNarrow::SymmetryFunctionAngularNarrow(nnp::ElementMap const&) [266] nnp::SymmetryFunctionGroupRadial::operator<(nnp::SymmetryFunctionGroup const&) const
 [311] _GLOBAL__sub_I__ZN3nnp7ElementC2EmRKNS_10ElementMapE [216] nnp::SymmetryFunctionAngularNarrow::~SymmetryFunctionAngularNarrow() [219] nnp::SymmetryFunctionAngularNarrow::parameterLine() const
 [312] _GLOBAL__sub_I__ZN3nnp9StructureC2Ev [251] nnp::SymmetryFunctionGroupAngularWide::sortMembers() [17] nnp::SymmetryFunctionAngularNarrow::computeDerivatives(nnp::Atom&, nnp::Derivatives&) const
  [79] new4Dtable(int)       [252] nnp::SymmetryFunctionGroupAngularWide::setScalingFactors() [205] nnp::SymmetryFunctionAngularNarrow::compute2Derivatives(nnp::Atom&, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) const
 [112] build9From6ij(double****, double****) [217] nnp::SymmetryFunctionGroupAngularWide::addMember(nnp::SymmetryFunction const*) [139] nnp::SymmetryFunctionAngularNarrow::operator<(nnp::SymmetryFunction const&) const
 [125] build9From6ik(double****, double****) [253] nnp::SymmetryFunctionGroupAngularWide::SymmetryFunctionGroupAngularWide(nnp::ElementMap const&) [267] nnp::SymmetryFunctionGroupAngularWide::parameterLines() const
  [82] build9From6ik(double***, double***) [254] nnp::SymmetryFunctionGroupAngularWide::~SymmetryFunctionGroupAngularWide() [142] nnp::SymmetryFunctionGroupAngularWide::calculate(nnp::Atom&, bool) const
  [74] build9From6ik(double**, double**) [255] nnp::SymmetryFunctionGroupAngularNarrow::sortMembers() [235] nnp::SymmetryFunctionGroupAngularWide::operator<(nnp::SymmetryFunctionGroup const&) const
 [179] build9From6jk(double****, double****) [256] nnp::SymmetryFunctionGroupAngularNarrow::setScalingFactors() [268] nnp::SymmetryFunctionGroupAngularNarrow::parameterLines() const
  [96] build9From6jk(double***, double***) [192] nnp::SymmetryFunctionGroupAngularNarrow::addMember(nnp::SymmetryFunction const*) [147] nnp::SymmetryFunctionGroupAngularNarrow::calculate(nnp::Atom&, bool) const
  [21] getListPermutation(int*, int, int, int**, int&) [257] nnp::SymmetryFunctionGroupAngularNarrow::SymmetryFunctionGroupAngularNarrow(nnp::ElementMap const&) [236] nnp::SymmetryFunctionGroupAngularNarrow::operator<(nnp::SymmetryFunctionGroup const&) const
 [224] nnp::ElementMap::atomicNumber(std::string const&) [258] nnp::SymmetryFunctionGroupAngularNarrow::~SymmetryFunctionGroupAngularNarrow() [177] nnp::Atom::getNumNeighbors(double) const
 [313] nnp::ElementMap::registerElements(std::string const&) [71] nnp::Log::addLogEntry(std::string const&) [39] nnp::Mode::computeHessian(nnp::Structure&, unsigned long&) const
   [1] nnp::Prediction::getHighDerivatives(int, int) [317] nnp::Log::Log() [152] nnp::Mode::calculateEnergy(nnp::Structure&) const
 [165] nnp::Prediction::readStructureFromFile(std::string const&) [72] nnp::Log::operator<<(std::string const&) [153] nnp::Mode::calculateForces(nnp::Structure&) const
 [206] nnp::Prediction::predict() [223] nnp::Log::operator<<(std::vector<std::string, std::allocator<std::string> > const&) [2] nnp::Mode::computeHighDerivatives(nnp::Structure&, int, int) const
 [314] nnp::new3Dtable(int)  [114] nnp::Atom::toPhysicalUnits(double, double) [3] nnp::Mode::computeHighDerivativesMem(nnp::Structure&, int) const
 [315] nnp::new4Dtable(int)  [115] nnp::Atom::toNormalizedUnits(double, double) [154] nnp::Mode::calculateAtomicNeuralNetworks(nnp::Structure&, bool) const
  [84] nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, double) [109] nnp::Atom::Neighbor::Neighbor() [129] nnp::DFTD3::add(nnp::Structure&, std::vector<nnp::Element, std::allocator<nnp::Element> > const&, bool, bool) const
  [31] nnp::Derivatives::addDerives(nnp::Derivatives const&, int, int, int, double) [149] nnp::Atom::allocate(bool) [269] nnp::Element::setScaling(nnp::SymmetryFunction::ScalingType, std::vector<std::string, std::allocator<std::string> > const&, double, double) const
  [65] nnp::Derivatives::computed3fu(double const*, nnp::Derivatives const&) [118] nnp::Atom::Atom() [270] nnp::Element::getMinNeighbors() const
  [66] nnp::Derivatives::computed4fu(double const*, nnp::Derivatives const&) [318] nnp::Mode::initialize() [271] nnp::Element::getMaxCutoffRadius() const
  [37] nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*) [319] nnp::Mode::setupDFTD3() [272] nnp::Element::getMinCutoffRadius() const
  [34] nnp::Derivatives::computednfc(nnp::CutoffFunction const&, double const*, double const*, double const*) [320] nnp::Mode::setupCutoff() [273] nnp::Element::infoSymmetryFunctionGroups() const
  [28] nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [321] nnp::Mode::setupGeneric() [274] nnp::Element::infoSymmetryFunctionScaling() const
  [38] nnp::Derivatives::computednfc(nnp::CutoffFunction const&, int, double const*) [clone .constprop.16] [322] nnp::Mode::setupElements() [275] nnp::Element::infoSymmetryFunctionParameters() const
  [67] nnp::Derivatives::computednfu(double const*, nnp::Derivatives const&) [130] nnp::Mode::addEnergyOffset(nnp::Structure&, bool) [146] nnp::Element::calculateSymmetryFunctionGroups(nnp::Atom&, bool) const
  [69] nnp::Derivatives::build9VFrom6V(int, nnp::Derivatives&) [323] nnp::Mode::setupElementMap() [208] nnp::Settings::keywordExists(std::string const&) const
  [35] nnp::Derivatives::computecosijk(double const*, double const*) [324] nnp::Mode::loadSettingsFile(std::string const&) [337] nnp::Settings::info() const
  [86] nnp::Derivatives::computed2Rijk() [158] nnp::Mode::removeEnergyOffset(nnp::Structure&, bool) [276] nnp::Settings::getValues(std::string const&) const
  [87] nnp::Derivatives::computednRijk(double const*, double const*) [325] nnp::Mode::setupNeuralNetwork() [222] nnp::Settings::operator[](std::string const&) const
  [30] nnp::Derivatives::computed3Fzeta(nnp::Derivatives const&, double) [326] nnp::Mode::setupNormalization() [89] std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const
 [103] nnp::Derivatives::computed4Fzeta(nnp::Derivatives const&, double) [327] nnp::Mode::setupSymmetryFunctions() [77] std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::find(std::string const&) const
  [19] nnp::Derivatives::computednFzeta(nnp::Derivatives const&, double) [328] nnp::Mode::setupNeuralNetworkWeights(std::string const&) [143] std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::equal_range(std::string const&) const
  [24] nnp::Derivatives::computednRij2_6(double const*) [329] nnp::Mode::setupSymmetryFunctionGroups() [189] std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::find(std::string const&) const
 [187] nnp::Derivatives::toPhysicalUnits(double, double) [330] nnp::Mode::setupSymmetryFunctionScaling(std::string const&) [91] std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::find(std::string const&) const
  [27] nnp::Derivatives::computednRij2pRik2pRjk2(double, double, double, double const*, double const*, double const*, double) [159] nnp::Mode::calculateSymmetryFunctionGroups(nnp::Structure&, bool) [148] std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator[](std::string&&)
  [54] nnp::Derivatives::free() [331] nnp::Mode::Mode()  [108] void std::vector<nnp::Atom::Neighbor, std::allocator<nnp::Atom::Neighbor> >::_M_emplace_back_aux<nnp::Atom::Neighbor>(nnp::Atom::Neighbor&&)
  [76] nnp::Derivatives::reset() [241] nnp::DFTD3::DFTD3() [120] void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::emplace_back<nnp::Atom>(nnp::Atom&&)
  [85] nnp::Derivatives::addD2ij(nnp::Derivatives const&, int, int, double) [81] nnp::split(std::string const&, char) [121] void std::vector<nnp::Atom, std::allocator<nnp::Atom> >::_M_emplace_back_aux<nnp::Atom>(nnp::Atom&&)
  [93] nnp::Derivatives::addD3ij(nnp::Derivatives const&, int, int, double) [60] nnp::strpr(char const*, ...) [110] std::vector<nnp::Vec3D, std::allocator<nnp::Vec3D> >::_M_default_append(unsigned long)
 [173] nnp::Derivatives::addD4ij(nnp::Derivatives const&, int, int, double) [80] nnp::reduce(std::string const&, std::string const&, std::string const&) [277] void std::vector<nnp::Element, std::allocator<nnp::Element> >::_M_emplace_back_aux<nnp::Element>(nnp::Element&&)
   [4] nnp::Derivatives::addTodF(nnp::Derivatives const&, nnp::Derivatives const*, int*, int) [259] nnp::Element::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [220] void std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionRadial const* const&>(nnp::SymmetryFunctionRadial const* const&)
   [8] nnp::Derivatives::compute(nnp::NeuralNetwork const*) [169] nnp::Element::addSymmetryFunction(std::string const&, unsigned long const&) [226] void std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularWide const* const&>(nnp::SymmetryFunctionAngularWide const* const&)
  [88] nnp::Derivatives::addD2ijk(nnp::Derivatives const&, int, int, int, double) [260] nnp::Element::sortSymmetryFunctions() [178] void std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> >::_M_emplace_back_aux<nnp::SymmetryFunctionAngularNarrow const* const&>(nnp::SymmetryFunctionAngularNarrow const* const&)
  [32] nnp::Derivatives::addD3ijk(nnp::Derivatives const&, int, int, int, double) [261] nnp::Element::setupSymmetryFunctionGroups() [221] void std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> >::_M_emplace_back_aux<nnp::SymmetryFunction*>(nnp::SymmetryFunction*&&)
 [180] nnp::Derivatives::addD4ijk(nnp::Derivatives const&, int, int, int, double) [119] nnp::Element::updateSymmetryFunctionStatistics(nnp::Atom const&) [231] void std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> >::_M_emplace_back_aux<nnp::SymmetryFunctionGroup*>(nnp::SymmetryFunctionGroup*&&)
  [78] nnp::Derivatives::addTod1F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [262] nnp::Element::changeLengthUnitSymmetryFunctions(double) [338] std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >::~vector()
  [16] nnp::Derivatives::addTod2F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [263] nnp::Element::Element(nnp::Element const&) [230] void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag)
  [11] nnp::Derivatives::addTod3F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [264] nnp::Element::Element(unsigned long, nnp::ElementMap const&) [68] void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&)
   [5] nnp::Derivatives::addTod4F(nnp::Derivatives const&, nnp::Derivatives const*, int*) [232] nnp::Element::~Element() [138] void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&)
  [18] nnp::Derivatives::computeG(double, double, double, double const*, double const*, double const*, double, nnp::CutoffFunction const&) [94] nnp::pow_int(double, int) [243] std::vector<std::string, std::allocator<std::string> >::~vector()
  [23] nnp::Derivatives::computeG(double, double, double, double const*, double const*, double, nnp::CutoffFunction const&) [332] nnp::Settings::parseLines() [227] std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool)
  [25] nnp::Derivatives::computeG(int, double, double const*, double, nnp::CutoffFunction const&) [333] nnp::Settings::sanityCheck() [111] std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&)
  [55] nnp::Derivatives::Derivatives(int, int) [334] nnp::Settings::loadFile(std::string const&) [122] void std::vector<double, std::allocator<double> >::_M_emplace_back_aux<double>(double&&)
  [90] nnp::Derivatives::Derivatives() [335] nnp::Settings::readFile() [207] void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int>(int&&)
 [188] nnp::Derivatives::Derivatives(nnp::Derivatives const&) [98] std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.103] [157] std::vector<unsigned long, std::allocator<unsigned long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long, unsigned long const&)
  [58] nnp::Derivatives::Derivatives(int, int) [clone .constprop.25] [99] std::pair<std::string, std::string> const& nnp::safeFind<std::string, std::pair<std::string, std::string> >(std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > > const&, std::map<std::string, std::pair<std::string, std::string>, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::key_type const&) [clone .constprop.107] [102] void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long const&>(unsigned long const&)
  [36] nnp::Derivatives::Derivatives(int, int, double const*) [clone .constprop.18] [100] unsigned long const& nnp::safeFind<std::string, unsigned long>(std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > > const&, std::map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::key_type const&) [191] void std::vector<unsigned long, std::allocator<unsigned long> >::_M_emplace_back_aux<unsigned long>(unsigned long&&)
  [22] nnp::Derivatives::Derivatives(int, int, double const*, double) [56] std::string const& nnp::safeFind<unsigned long, std::string>(std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > > const&, std::map<unsigned long, std::string, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::key_type const&) [97] std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&)
  [33] nnp::Derivatives::Derivatives(int, int, double const*, double) [clone .constprop.15] [160] nnp::Structure::readFromFile(std::basic_ifstream<char, std::char_traits<char> >&) [145] std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)
  [73] nnp::Derivatives::~Derivatives() [137] nnp::Structure::readFromFile(std::string) [190] std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, std::string> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::pair<std::string, std::string> > >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&)
  [15] nnp::Derivatives::operator=(nnp::Derivatives const&) [161] nnp::Structure::readFromLines(std::vector<std::string, std::allocator<std::string> > const&) [278] std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, std::string> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, std::string> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, std::string> > > >::_M_get_insert_unique_pos(std::string const&)
 [225] nnp::NeuralNetwork::allocateLayer(nnp::NeuralNetwork::Layer&, int, int, nnp::NeuralNetwork::ActivationFunction) [162] nnp::Structure::setElementMap(nnp::ElementMap const&) [135] std::_Rb_tree_iterator<std::pair<std::string const, std::pair<std::string, unsigned long> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_insert_equal<std::pair<std::string, std::pair<std::string, unsigned long> > >(std::pair<std::string, std::pair<std::string, unsigned long> >&&)
  [95] nnp::NeuralNetwork::propagateLayer(nnp::NeuralNetwork::Layer&, nnp::NeuralNetwork::Layer&) [150] nnp::Structure::toPhysicalUnits(double, double, double, double) [339] std::_Rb_tree<std::string, std::pair<std::string const, std::pair<std::string, unsigned long> >, std::_Select1st<std::pair<std::string const, std::pair<std::string, unsigned long> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<std::string, unsigned long> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<std::string, unsigned long> > >*)
 [246] nnp::NeuralNetwork::setConnections(double const* const&) [151] nnp::Structure::toNormalizedUnits(double, double, double, double) [144] std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string&&>&&, std::tuple<>&&)
 [247] nnp::NeuralNetwork::setNormalizeNeurons(bool) [163] nnp::Structure::calculateNeighborList(double) [340] std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&)
 [104] nnp::NeuralNetwork::propagate() [164] nnp::Structure::reset() [233] std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::string> >*)
 [248] nnp::NeuralNetwork::NeuralNetwork(int, int const* const&, nnp::NeuralNetwork::ActivationFunction const* const&) [336] nnp::Structure::Structure() [279] std::_Rb_tree_iterator<std::pair<std::string const, unsigned long> > std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, unsigned long> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&)
 [249] nnp::NeuralNetwork::~NeuralNetwork() [126] nnp::build9From6ik(double const (*) [6], double (*) [9]) [341] std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_get_insert_unique_pos(std::string const&)
 [155] nnp::CutoffFunction::setCutoffType(nnp::CutoffFunction::CutoffType) [101] nnp::ElementMap::index(std::string const&) const [132] std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_copy(std::_Rb_tree_node<std::pair<std::string const, unsigned long> > const*, std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*)
 [134] nnp::CutoffFunction::setCutoffRadius(double) [57] nnp::ElementMap::symbol(unsigned long) const [127] std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*)
 [123] nnp::CutoffFunction::setCutoffParameter(double) [29] nnp::Derivatives::computeSum(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [234] std::_Rb_tree<unsigned long, std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container>, std::_Select1st<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, nnp::SymmetryFunctionStatistics::Container> >*)
 [156] nnp::CutoffFunction::CutoffFunction() [62] nnp::Derivatives::computeProd(nnp::Derivatives const&, nnp::Derivatives&) const [280] std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::string> >, unsigned long const&)
 [198] nnp::getDerivativesG(double const*, double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [61] nnp::Derivatives::computeProd(double, nnp::Derivatives&) const [133] std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_copy(std::_Rb_tree_node<std::pair<unsigned long const, std::string> > const*, std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*)
 [199] nnp::getDerivativesG(double const*, double const*, double, double, double, double, double*, double (*) [9], nnp::CutoffFunction const&) [63] nnp::Derivatives::computeProdThird(nnp::Derivatives const&, nnp::Derivatives&) const [128] std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*)
 [174] nnp::getDerivativesG(double const*, double, double, double (*) [6], nnp::CutoffFunction const&) [70] nnp::Derivatives::computeSumFourth(double, double, nnp::Derivatives const&, nnp::Derivatives&) const [244] void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.151]
  [92] nnp::getDerivativesR(double const*, double const&, int, int) [64] nnp::Derivatives::computeProdFourth(nnp::Derivatives const&, nnp::Derivatives&) const [281] void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.197]
 [316] nnp::toPhysicalUnits(double*, unsigned long, double, double) [116] nnp::NeuralNetwork::calculateDEdG(double*) const [282] void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.197]
 [166] nnp::SymmetryFunction::setScalingType(nnp::SymmetryFunction::ScalingType, std::string, double, double) [13] nnp::NeuralNetwork::calculatedEdG(double**, int) const [283] void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.168]
 [167] nnp::SymmetryFunction::setCutoffFunction(nnp::CutoffFunction::CutoffType, double) [42] nnp::NeuralNetwork::calculatedEdG(double*) const [284] void std::__insertion_sort<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.153]
 [168] nnp::SymmetryFunction::SymmetryFunction(unsigned long, nnp::ElementMap const&) [131] nnp::NeuralNetwork::getNumNeurons(int) const [342] void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, bool (*)(std::string const&, std::string const&)) [clone .constprop.93]
 [200] nnp::getDerivativesfc(double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [10] nnp::NeuralNetwork::calculated2EdG(double**, double**, double**) const [245] void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionRadial const**, std::vector<nnp::SymmetryFunctionRadial const*, std::allocator<nnp::SymmetryFunctionRadial const*> > >, long, bool (*)(nnp::SymmetryFunctionRadial const*, nnp::SymmetryFunctionRadial const*)) [clone .constprop.139]
 [201] nnp::getDerivativesfc(double const*, double const*, double const*, double*, double (*) [9], nnp::CutoffFunction const&) [12] nnp::NeuralNetwork::calculated3EdG(double**, double**, double**, double**, double**, double**, double**) const [285] void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularWide const**, std::vector<nnp::SymmetryFunctionAngularWide const*, std::allocator<nnp::SymmetryFunctionAngularWide const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularWide const*, nnp::SymmetryFunctionAngularWide const*)) [clone .constprop.185]
 [107] nnp::getDerivativesRij(double const*, double*, double (*) [6]) [14] nnp::NeuralNetwork::calculated4EdG(double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**, double**) const [286] void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionAngularNarrow const**, std::vector<nnp::SymmetryFunctionAngularNarrow const*, std::allocator<nnp::SymmetryFunctionAngularNarrow const*> > >, long, bool (*)(nnp::SymmetryFunctionAngularNarrow const*, nnp::SymmetryFunctionAngularNarrow const*)) [clone .constprop.185]
 [181] nnp::getDerivativesRijk(double (*) [9]) [41] nnp::NeuralNetwork::calculateD2EdG2(double**) const [287] void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunction**, std::vector<nnp::SymmetryFunction*, std::allocator<nnp::SymmetryFunction*> > >, long, bool (*)(nnp::SymmetryFunction*, nnp::SymmetryFunction*)) [clone .constprop.156]
 [175] nnp::setSecondDerivesij(double (*) [6], int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [9] nnp::NeuralNetwork::calculateDnEdGn(double*, double**, double***, double****) const [288] void std::__introsort_loop<__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)>(__gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, __gnu_cxx::__normal_iterator<nnp::SymmetryFunctionGroup**, std::vector<nnp::SymmetryFunctionGroup*, std::allocator<nnp::SymmetryFunctionGroup*> > >, long, bool (*)(nnp::SymmetryFunctionGroup*, nnp::SymmetryFunctionGroup*)) [clone .constprop.141]
 [182] nnp::setSecondDerivesijk(double (*) [9], int, int, int, double, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >&) [265] nnp::NeuralNetwork::info() const [343] void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, long, bool (*)(std::string const&, std::string const&)) [clone .constprop.81]
 [183] nnp::getDerivativesRijRik(double const*, double const*, double*, double (*) [9]) [105] nnp::NeuralNetwork::setInput(double const* const&) const
