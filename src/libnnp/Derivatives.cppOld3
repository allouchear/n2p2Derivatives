// Abdul-Rahman Allouche 2020
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

#ifdef HIGH_DERIVATIVES

#include "Derivatives.h"
#include <cmath>
#include <iostream>


using namespace std;
using namespace nnp;

static void swap(int *a, int *b);
static void permutation(int *arr, int start, int end, double val, double*** tab3);
static void permutation(int *arr, int start, int end, double val, double**** tab4);
static double* new1Dtable(int size);
static double* copy1Dtable(int size, double* t);
static void free1Dtable(double* t);
static double** new2Dtable(int size);
static double** copy2Dtable(int size, double** t);
static void free2Dtable(int size, double**t);
static double*** new3Dtable(int size);
static double*** copy3Dtable(int size, double*** t);
static void free3Dtable(int size, double***t);
static double**** new4Dtable(int size);
static double**** copy4Dtable(int size, double**** t);
static void free4Dtable(int size, double****t);
static void build9From6ij(double* d6, double* d9);
static void build9From6ik(double* d6, double* d9);
static void build9From6jk(double* d6, double* d9);
static void build9From6ij(double** d6, double** d9);
static void build9From6ik(double** d6, double** d9);
static void build9From6jk(double** d6, double** d9);
static void build9From6ij(double*** d6, double*** d9);
static void build9From6ij(double**** d6, double**** d9);
static void build9From6ik(double*** d6, double*** d9);
static void build9From6ik(double**** d6, double**** d9);
static void build9From6jk(double*** d6, double*** d9);
static void build9From6jk(double**** d6, double**** d9);
static void build9From6(int lm, double* d6, double* d9);
static void build9From6(int lm, double** d6, double** d9);
static void build9From6(int lm, double*** d6, double*** d9);
static void build9From6(int lm, double**** d6, double**** d9);

Derivatives::Derivatives()
{
	maxOrder = 0;
	nVariables = 0;
	value = 0;
	df = NULL;
	d2f = NULL;
	d3f = NULL;
	d4f = NULL;
}
void Derivatives::free()
{
	if(df) free1Dtable(df);
	if(d2f) free2Dtable(nVariables, d2f);
	if(d3f) free3Dtable(nVariables, d3f);
	if(d4f) free4Dtable(nVariables, d4f);
	maxOrder = 0;
	nVariables = 0;
	value = 0;
	df = NULL;
	d2f = NULL;
	d3f = NULL;
	d4f = NULL;
}
Derivatives::~Derivatives()
{
	free();
}

Derivatives::Derivatives(int mOrder, int nVar)
{
	maxOrder = mOrder;
	nVariables = nVar;
	value = 0;
	df = NULL;
	d2f = NULL;
	d3f = NULL;
	d4f = NULL;
	if(nVariables<1) return;
	if(maxOrder>0) df = new1Dtable(nVariables);
	if(maxOrder>1) d2f = new2Dtable(nVariables);
	if(maxOrder>2) d3f = new3Dtable(nVariables);
	if(maxOrder>3) d4f = new4Dtable(nVariables);
	if(maxOrder>4) throw std::invalid_argument("ERROR: Derivatives over 4 are not yet implemented Derivatives class.\n");
}
Derivatives::Derivatives(const Derivatives& right)
{
	maxOrder = right.maxOrder;
	nVariables = right.nVariables;
	value = right.value;
	df = NULL;
	d2f = NULL;
	d3f = NULL;
	d4f = NULL;
	if(nVariables<1) return;
	if(maxOrder>0) df = copy1Dtable(nVariables, right.df);
	if(maxOrder>1) d2f = copy2Dtable(nVariables, right.d2f);
	if(maxOrder>2) d3f = copy3Dtable(nVariables, right.d3f);
	if(maxOrder>3) d4f = copy4Dtable(nVariables, right.d4f);
	if(maxOrder>4) throw std::invalid_argument("ERROR: Derivatives over 4 are not yet implemented Derivatives class.\n");
}
Derivatives& Derivatives::operator=(const Derivatives& right)
{
	if(&right==this) return *this;
	free();
	maxOrder = right.maxOrder;
	nVariables = right.nVariables;
	value = right.value;
	df = NULL;
	d2f = NULL;
	d3f = NULL;
	d4f = NULL;
	if(maxOrder>0) df = copy1Dtable(nVariables, right.df);
	if(maxOrder>1) d2f = copy2Dtable(nVariables, right.d2f);
	if(maxOrder>2) d3f = copy3Dtable(nVariables, right.d3f);
	if(maxOrder>3) d4f = copy4Dtable(nVariables, right.d4f);
	if(maxOrder>4) throw std::invalid_argument("ERROR: Derivatives over 4 are not yet implemented Derivatives class.\n");
	return *this;
}
/* size = number of variables 
   first : vector if size elements

   compute derivatives of a*f1+b*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeSumFirst(double a, double b, const Derivatives & f2, Derivatives & fsum) const
{
	for(int l=0;l<nVariables;l++) 
		fsum.df[l] = a*df[l]+b*f2.df[l];
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 

   compute derivatives of a*f1+b*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeSumSecond(double a, double b, const Derivatives & f2, Derivatives & fsum) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			fsum.d2f[l][m] = fsum.d2f[m][l] = a*d2f[l][m] + b*f2.d2f[l][m];
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 
   third : size*size*size

   compute derivatives of a*f1+b*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeSumThird(double a, double b, const Derivatives & f2, Derivatives & fsum) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
			{
				double v = a*d3f[l][m][n] + b*f2.d3f[l][m][n];
				int arr[] = {l,m,n};
				permutation(arr, 0, 2, v, fsum.d3f);
			}
}
/* nVariables = number of variables 
   first : vector if nVariables elements
   second : matrix nVariables*nVariables 
   third : nVariables*nVariables*nVariables
   fourth : nVariables*nVariables*nVariables

   compute derivatives of a*f1+b*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeSumFourth(double a, double b, const Derivatives & f2, Derivatives & fsum) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
				for(int k=n;k<nVariables;k++) 
				{
					double v = a*d4f[l][m][n][k] + b*f2.d4f[l][m][n][k];
					int arr[] = {l,m,n,k};
					permutation(arr, 0, 3, v, fsum.d4f);
			}
}
void Derivatives::computeSum(double a, double b, const Derivatives & f2, Derivatives & fsum) const
{
	if(nVariables != f2.nVariables || maxOrder != f2.maxOrder ) 
		throw std::invalid_argument("ERROR: I cannnot add 2 Derivaritves  : f1 &f2 have not the sam number of variables in Derivatives class.\n");
	
	if(nVariables != fsum.nVariables || maxOrder != fsum.maxOrder ) 
	{
		fsum.free();
		fsum = Derivatives(maxOrder, nVariables);
	}
	if(maxOrder>0) computeSumFirst( a,  b, f2, fsum);
	if(maxOrder>1) computeSumSecond( a,  b, f2, fsum);
	if(maxOrder>2) computeSumThird( a,  b, f2, fsum);
	if(maxOrder>3) computeSumFourth( a,  b, f2, fsum);
	fsum.value = value + f2.value;
}
void Derivatives::computeSum(const Derivatives & f2, Derivatives & fsum) const
{
	computeSum(1.0, 1.0, f2, fsum);
}
Derivatives Derivatives::computeSum(double a, double b, const Derivatives & f2) const
{
	if(nVariables != f2.nVariables || maxOrder != f2.maxOrder ) 
		throw std::invalid_argument("ERROR: I cannnot add 2 Derivaritves  : f1 &f2 have not the sam number of variables in Derivatives class.\n");
	
	Derivatives fsum(maxOrder, nVariables);
	computeSum(a, b, f2, fsum);
	return fsum;
}
Derivatives Derivatives::computeSum(const Derivatives & f2) const
{
	return computeSum(1.0,1.0,f2);
}
Derivatives Derivatives::operator+(const Derivatives & f2) const
{
	return computeSum(1.0,1.0,f2);
}
void Derivatives::operator+=(const Derivatives & f2)
{
	*this = *this + f2;
}
void Derivatives::operator+=(double v)
{
	// no change in derivative
	value += v;
}
/* size = number of variables 
   first : vector if size elements

   compute derivatives of f1*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeProdFirst(const Derivatives& f2, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		fprod.df[l] = df[l]*f2.value+value*f2.df[l];
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 

   compute derivatives of f1*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeProdSecond(const Derivatives& f2, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			fprod.d2f[l][m] = fprod.d2f[m][l] = d2f[l][m]*f2.value + value*f2.d2f[l][m] + df[l]*f2.df[m]+df[m]*f2.df[l];
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 
   third : size*size*size

   compute derivatives of f1*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeProdThird(const Derivatives& f2, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
			{
				double v = 
				  d3f[l][m][n] *f2.value + value*f2.d3f[l][m][n]
				+ d2f[l][m]*f2.df[n]+ d2f[l][n]*f2.df[m]+ d2f[m][n]*f2.df[l]+
				+ f2.d2f[l][m]*df[n]+ f2.d2f[l][n]*df[m]+ f2.d2f[m][n]*df[l];
				int arr[] = {l,m,n};
				permutation(arr, 0, 2, v, fprod.d3f);
			}
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 
   third : size*size*size
   fourth : size*size*size

   compute derivatives of f1*f2 using derivatives of f1 and those of f2 
*/
void Derivatives::computeProdFourth(const Derivatives& f2, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
				for(int k=n;k<nVariables;k++) 
				{
					double v = 
				  	d4f[l][m][n][k] *f2.value + value*f2.d4f[l][m][n][k]
					+ d3f[l][m][n]*f2.df[k]+ d3f[l][m][k]*f2.df[n]+ d3f[l][n][k]*f2.df[m] + d3f[m][n][k]*f2.df[l]
					+ f2.d3f[l][m][n]*df[k]+ f2.d3f[l][m][k]*df[n]+ f2.d3f[l][n][k]*df[m] + f2.d3f[m][n][k]*df[l] 

					+ d2f[l][m]*f2.d2f[n][k]+ d2f[l][n]*f2.d2f[m][k]+ d2f[l][k]*f2.d2f[m][n]
					+ f2.d2f[l][m]*d2f[n][k]+ f2.d2f[l][n]*d2f[m][k]+ f2.d2f[l][k]*d2f[m][n];

					int arr[] = {l,m,n,k};
					permutation(arr, 0, 3, v, fprod.d4f);
			}
}
void Derivatives::computeProd(const Derivatives& f2, Derivatives& fprod) const
{
	if(nVariables != f2.nVariables || maxOrder != f2.maxOrder ) 
		throw std::invalid_argument("ERROR: I cannnot do a prod of 2 Derivaritves  : f1 &f2 have not the sam number of variables in Derivatives class.\n");
	
	if(nVariables != fprod.nVariables || maxOrder != fprod.maxOrder ) 
	{
		fprod.free();
		fprod = Derivatives(maxOrder, nVariables);
	}
	if(maxOrder>0) computeProdFirst(f2, fprod);
	if(maxOrder>1) computeProdSecond(f2, fprod);
	if(maxOrder>2) computeProdThird(f2, fprod);
	if(maxOrder>3) computeProdFourth(f2, fprod);
	fprod.value = value * f2.value;
}
Derivatives Derivatives::computeProd(const Derivatives& f2) const
{
	 if(nVariables != f2.nVariables || maxOrder != f2.maxOrder )
		throw std::invalid_argument("ERROR: I cannnot do a prod of 2 Derivaritves  : f1 &f2 have not the same number of variables in Derivatives class.\n");

        Derivatives fprod(maxOrder, nVariables);
        computeProd(f2, fprod);
	return fprod;

}
Derivatives Derivatives::operator*(const Derivatives& f2) const
{
	 if(nVariables != f2.nVariables || maxOrder != f2.maxOrder )
		throw std::invalid_argument("ERROR: I cannnot do a prod of 2 Derivaritves  : f1 &f2 have not the same number of variables in Derivatives class.\n");

        Derivatives fprod(maxOrder, nVariables);
        computeProd(f2, fprod);
	return fprod;
}
void Derivatives::operator*=(const Derivatives& f2)
{
	*this = *this * f2;
}
/* size = number of variables 
   first : vector if size elements

   compute derivatives of s*f1 using derivatives of f1
*/
void Derivatives::computeProdFirst(double s, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		fprod.df[l] = df[l]*s;
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 

   compute derivatives of v*f1 using derivatives of f1
*/
void Derivatives::computeProdSecond(double s, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			fprod.d2f[l][m] = fprod.d2f[m][l] = d2f[l][m]*s;
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 
   third : size*size*size

   compute derivatives of v*f1 using derivatives of f1
*/
void Derivatives::computeProdThird(double s, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=0;m<nVariables;m++) 
			for(int n=0;n<nVariables;n++) 
				fprod.d3f[l][m][n] = d3f[l][m][n] *s;
}
/* size = number of variables 
   first : vector if size elements
   second : matrix size*size 
   third : size*size*size
   fourth : size*size*size

   compute derivatives of v*f1 using derivatives of f1
*/
void Derivatives::computeProdFourth(double s, Derivatives& fprod) const
{
	for(int l=0;l<nVariables;l++) 
		for(int m=0;m<nVariables;m++) 
			for(int n=0;n<nVariables;n++) 
				for(int k=0;k<nVariables;k++) 
				  	fprod.d4f[l][m][n][k]  = d4f[l][m][n][k] *s;
}
void Derivatives::computeProd(double s, Derivatives& fprod) const
{
	if(nVariables != fprod.nVariables || maxOrder != fprod.maxOrder ) 
	{
		fprod.free();
		fprod = Derivatives(maxOrder, nVariables);
	}
	if(maxOrder>0) computeProdFirst(s, fprod);
	if(maxOrder>1) computeProdSecond(s, fprod);
	if(maxOrder>2) computeProdThird(s, fprod);
	if(maxOrder>3) computeProdFourth(s, fprod);
	fprod.value = value * s;
}
Derivatives Derivatives::computeProd(double s) const
{
        Derivatives fprod(maxOrder, nVariables);
        computeProd(s, fprod);
	return fprod;

}
Derivatives Derivatives::operator*(double s) const
{
        Derivatives fprod(maxOrder, nVariables);
        computeProd(s, fprod);
	return fprod;
}
void Derivatives::operator*=(double s)
{
	*this = *this * s;
}
/*
   compute derivatives of f1*f2*f3 using derivatives of f1, f2 and those of f3
*/
void Derivatives::computeProd(const Derivatives& f2, const Derivatives& f3, Derivatives& fprod)
{
	Derivatives fprod12  = computeProd(f2);
	fprod  = fprod12.computeProd(f3);
}
Derivatives Derivatives::computeProd(const Derivatives& f2, const Derivatives& f3)
{
	Derivatives fprod12  = computeProd(f2);
	Derivatives fprod123  = fprod12.computeProd(f3);
	return fprod123;
}
/* 
  compute derivatives of f(u), using df/du (dnf) and du/dxi (nVariables variable)
   dnf[0] = f(u)
   dnf[1] = df(u)/du
   dnf[n] = dnf(u)/du^n
*/
void Derivatives::computedfu(const double* dnf, const Derivatives& u)
{
	for(int l=0;l<nVariables;l++) 
		df[l] = dnf[1]*u.df[l];
}
void Derivatives::computed2fu(const double* dnf, const Derivatives& u)
{
        for(int l=0;l<nVariables;l++)
        	for(int m=l;m<nVariables;m++)
			d2f[l][m] = d2f[m][l] = u.df[l]*u.df[m]*dnf[2] + u.d2f[l][m]*dnf[1];
}
void Derivatives::computed3fu(const double* dnf, const Derivatives& u)
{
        for(int l=0;l<nVariables;l++)
        	for(int m=l;m<nVariables;m++)   
        		for(int n=m;n<nVariables;n++)   
			{
				double v = 
					  dnf[3]*(
						u.df[l]*u.df[m]*u.df[n]
						)
					+ dnf[2]*(
						u.d2f[l][m]*u.df[n] +
						u.d2f[l][n]*u.df[m] +
						u.d2f[m][n]*u.df[l] 
						)
					+ dnf[1]*(
						u.d3f[l][m][n]
						);
			 	int arr[] = {l,m,n};
                                permutation(arr, 0, 2, v, d3f);
			}
}
void Derivatives::computed4fu(const double* dnf, const Derivatives& u)
{
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
				for(int k=n;k<nVariables;k++) 
				{
					double v = 
				  	  dnf[4]*(u.df[l]*u.df[m]*u.df[n]*u.df[k])
					+ dnf[3]*(
					u.d2f[l][m]*u.df[n]*u.df[k]+ 
					u.d2f[l][n]*u.df[m]*u.df[k]+
					u.d2f[l][k]*u.df[m]*u.df[n]+
					u.d2f[m][n]*u.df[l]*u.df[k]+
					u.d2f[m][k]*u.df[l]*u.df[n]+
					u.d2f[n][k]*u.df[l]*u.df[m]
					)
					+ dnf[2]*(
					u.d3f[l][m][n]*u.df[k]+
					u.d3f[l][m][k]*u.df[n]+
					u.d3f[l][n][k]*u.df[m]+
					u.d3f[m][n][k]*u.df[l]+
					u.d2f[l][m]*u.d2f[n][k]+
					u.d2f[l][n]*u.d2f[m][k]+
					u.d2f[l][k]*u.d2f[m][n]
					)
					+ dnf[1]*(u.d4f[l][m][n][k]);

					int arr[] = {l,m,n,k};
					permutation(arr, 0, 3, v, d4f);
			}
}
void Derivatives::computednfu(const double* dnf, const Derivatives& u)
{
	if(nVariables != u.nVariables || maxOrder != u.maxOrder ) 
	{
		free();
		*this = Derivatives(maxOrder, nVariables);
	}
	if(maxOrder>0) computedfu(dnf, u);
	if(maxOrder>1) computed2fu(dnf, u);
	if(maxOrder>2) computed3fu(dnf, u);
	if(maxOrder>3) computed4fu(dnf, u);
	value = dnf[0];
}
void Derivatives::computednexpu(const Derivatives& u)
{
	double* dnf = NULL;
	if(maxOrder>0)dnf = new double[maxOrder];
	for(int i=0;i<maxOrder;i++) dnf[i] = exp(u.value);
	computednfu(dnf,u);
	if(dnf) delete [] dnf;
}
/* nVariables = number of variables 
   df : vector if nVariables elements

   compute derivatives of F^zeta using derivatives of F
*/
void Derivatives::computedFzeta(const Derivatives& F, double zeta)
{
	double Fz = pow(F.value,zeta);
	double overF = (abs(F.value>1e-14))?1.0/F.value:0;
	double Fzm1 = zeta*Fz*overF;
	for(int l=0;l<nVariables;l++) 
		df[l] = Fzm1*F.df[l];
	value = Fz;
}
/* nVariables = number of variables 
   df : vector if nVariables elements
   d2f : matrix nVariables*nVariables 

   compute derivatives of f^zeta using derivatives of F
*/
void Derivatives::computed2Fzeta(const Derivatives& F, double zeta)
{
	double Fz = pow(F.value,zeta);
	double overF = (abs(F.value>1e-14))?1.0/F.value:0;
	double Fzm1 = zeta*Fz*overF;
	double Fzm2 = (zeta-1)*Fzm1*overF;
	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			d2f[l][m] = d2f[m][l] = F.d2f[l][m]*Fzm1 + Fzm2*F.df[l]*F.df[m];
	value = Fz;

}
/* nVariables = number of variables 
   df : vector if nVariables elements
   d2f : matrix nVariables*nVariables 
   d3f : nVariables*nVariables*nVariables

   compute derivatives of f^zeta using derivatives of F
*/
void Derivatives::computed3Fzeta(const Derivatives& F, double zeta)
{
	double Fz = pow(F.value,zeta);
	double overF = (abs(F.value>1e-14))?1.0/F.value:0;
	double Fzm1 = zeta*Fz*overF;
	double Fzm2 = (zeta-1)*Fzm1*overF;
	double Fzm3 = (zeta-2)*Fzm2*overF;

	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
			{
				double v = 
				  Fzm3*(F.df[l]*F.df[m]*F.df[n])
				+ Fzm2*(F.d2f[l][m]*F.df[n]+ F.d2f[l][n]*F.df[m]+F.d2f[m][n]*F.df[l]) 
				+ Fzm1*(F.d3f[l][m][n]);
				int arr[] = {l,m,n};
				permutation(arr, 0, 2, v, d3f);
			}
	value = Fz;
}
/* nVariables = number of variables 
   df : vector if nVariables elements
   d2f : matrix nVariables*nVariables 
   d3f : nVariables*nVariables*nVariables
   d4f : nVariables*nVariables*nVariables

   compute derivatives of f^zeta using derivatives of F
*/
void Derivatives::computed4Fzeta(const Derivatives& F, double zeta)
{
	double Fz = pow(F.value,zeta);
	double overF = (abs(F.value>1e-14))?1.0/F.value:0;
	double Fzm1 = zeta*Fz*overF;
	double Fzm2 = (zeta-1)*Fzm1*overF;
	double Fzm3 = (zeta-2)*Fzm2*overF;
	double Fzm4 = (zeta-3)*Fzm3*overF;

	for(int l=0;l<nVariables;l++) 
		for(int m=l;m<nVariables;m++) 
			for(int n=m;n<nVariables;n++) 
				for(int k=n;k<nVariables;k++) 
				{
					double v = 
				  	  Fzm4*(F.df[l]*F.df[m]*F.df[n]*F.df[k])
					+ Fzm3*(
					F.d2f[l][m]*F.df[n]*F.df[k]+ 
					F.d2f[l][n]*F.df[m]*F.df[k]+
					F.d2f[l][k]*F.df[m]*F.df[n]+
					F.d2f[m][n]*F.df[l]*F.df[k]+
					F.d2f[m][k]*F.df[l]*F.df[n]+
					F.d2f[n][k]*F.df[l]*F.df[m]
					)
					+ Fzm2*(
					F.d3f[l][m][n]*F.df[k]+
					F.d3f[l][m][k]*F.df[n]+
					F.d3f[l][n][k]*F.df[m]+
					F.d3f[m][n][k]*F.df[l]+
					F.d2f[l][m]*F.d2f[n][k]+
					F.d2f[l][n]*F.d2f[m][k]+
					F.d2f[l][k]*F.d2f[m][n]
					)
					+ Fzm1*(F.d4f[l][m][n][k]);

					int arr[] = {l,m,n,k};
					permutation(arr, 0, 3, v, d4f);
			}
	value = Fz;
}
void Derivatives::computednFzeta(const Derivatives& F, double zeta)
{
	if(nVariables != F.nVariables || maxOrder != F.maxOrder ) 
	{
		free();
		*this = Derivatives(maxOrder, nVariables);
	}
	if(maxOrder>0) computedFzeta(F,zeta);
	if(maxOrder>1) computed2Fzeta(F,zeta);
	if(maxOrder>2) computed3Fzeta(F,zeta);
	if(maxOrder>3) computed4Fzeta(F,zeta);
	if(maxOrder<1) value = pow(F.value,zeta);
}
Derivatives Derivatives::getdnFzeta(double zeta) const
{
	Derivatives dnFz;
	dnFz.computednFzeta(*this, zeta);
	return dnFz;
}
/* firstDeriv vector with 9 elements */
/* Derivatives of Rij dot Rik*/
void Derivatives::computedRijk(const double* rij, const double* rik)
{
	// rij[l] = ri[l]-rj[l]
	for(size_t l=0;l<3;l++) df[l] = rij[l]+rik[l];// d/dxi, d/dyi, d/dzi
	for(size_t l=3;l<6;l++) df[l] = -rik[l-3];// d/dxj, d/dyj, d/dzj
	for(size_t l=6;l<9;l++) df[l] = -rij[l-6];// d/dxk, d/dyk, d/dzk
}
/* second matrix with 9x9 elements */
/* first vector with 9 elements */
void Derivatives::computed2Rijk()
{
	for(size_t l=0;l<9;l++)  
		for(size_t m=0;m<9;m++)
			d2f[l][m] = 0;

	for(size_t l=0;l<3;l++)  d2f[l][l] = 2; // d/dxi2, d/dyi2, d/dzi2
	/*
	firstDeriv[0][0+3] = -1; // d/dxidxj
	firstDeriv[0][0+6] = -1; // d/dxidxk
	firstDeriv[1][1+3] = -1; // d/dyidyj
	firstDeriv[1][1+6] = -1; // d/dyidyk
	firstDeriv[2][2+3] = -1; // d/dzidzj
	firstDeriv[2][2+6] = -1; // d/dzidzk

	firstDeriv[3][3+3] = 1; // d/dxjdxk
	firstDeriv[4][4+3] = 1; // d/dyjdyk
	firstDeriv[5][5+3] = 1; // d/dzjdzk
	*/
	for(size_t l=0;l<3;l++)  d2f[l][l+3] = d2f[l+3][l] = d2f[l][l+6] = d2f[l+6][l] = -1;
	for(size_t l=0;l<3;l++)  d2f[l+3][l+6] = d2f[l+6][l+3] = 1;
}
/* third 9x9x9 elements */
/* second matrix with 9x9 elements */
/* first vector with 9 elements */
void Derivatives::computed3Rijk()
{
	for(size_t l=0;l<9;l++)  
		for(size_t m=0;m<9;m++)
			for(size_t n=0;n<9;n++)
				d3f[l][m][n] = 0;
}
/* fourth 9x9x9x9 elements */
/* third 9x9x9 elements */
/* second matrix with 9x9 elements */
/* first vector with 9 elements */
void Derivatives::computed4Rijk()
{
	for(size_t l=0;l<9;l++)  
		for(size_t m=0;m<9;m++)
			for(size_t n=0;n<9;n++)
				for(size_t k=0;k<9;k++)
					d4f[l][m][n][k] = 0;
}
void Derivatives::computednRijk(const double* rij, const double* rik)
{
	if(nVariables != 9) 
	{
		free();
		*this = Derivatives(maxOrder, 9);
	}
	if(maxOrder>0) computedRijk(rij,rik);
	if(maxOrder>1) computed2Rijk();
	if(maxOrder>2) computed3Rijk();
	if(maxOrder>3) computed4Rijk();
	value = 0;
	for(size_t l=0;l<3;l++) value += rij[l]*rik[l];// rij dot rik
}
Derivatives::Derivatives(int mOrder, const double* rij, const double* rik): Derivatives(mOrder, 9)
{
	computednRijk(rij, rik);
}
/* df  : vector with 6 elements
   derivative of Rij2 = (xi-xj)^2+ (zi-zj)^2+(zi-zj)^2
   6 variables : xi, yi, zi, xj,yj,zj
*/
void Derivatives::computedRij2_6(const double* rij)
{
	for(size_t l=0;l<3;l++) df[l] = 2*rij[l];
	for(size_t l=3;l<6;l++) df[l] = -df[l-3];
}
/* df  : vector with 6 elements
 d2f : matrix with 6x6 elements
  derivative of Rij2 = (xi-xj)^2+ (zi-zj)^2+(zi-zj)^2
  6 variables : xi, yi, zi, xj,yj,zj
*/
void Derivatives::computed2Rij2_6()
{
	for(size_t l=0;l<3;l++)   d2f[l][l] = 2;
	for(size_t l=0;l<3;l++)   d2f[l][l+3] =  d2f[l+3][l]  = -2;
}

/* df  : vector with 6 elements
 d2f : matrix with 6x6 elements
 Third  : 6x6x6 elements 
  derivative of Rij2 = (xi-xj)^2+ (zi-zj)^2+(zi-zj)^2
  6 variables : xi, yi, zi, xj,yj,zj
*/
void Derivatives::computed3Rij2_6()
{
	for(size_t l=0;l<6;l++)
		for(size_t m=0;m<6;m++)
			for(size_t n=0;n<6;n++)
				d3f[l][m][n] = 0;
}
/* df  : vector with 6 elements
 d2f : matrix with 6x6 elements
 Third  : 6x6x6 elements 
  derivative of Rij2 = (xi-xj)^2+ (zi-zj)^2+(zi-zj)^2
  6 variables : xi, yi, zi, xj,yj,zj
*/
void Derivatives::computed4Rij2_6()
{
	for(size_t l=0;l<6;l++)
		for(size_t m=0;m<6;m++)
			for(size_t n=0;n<6;n++)
				for(size_t k=0;k<6;k++)
					d4f[l][m][n][k] = 0;
}
void Derivatives::computednRij2_6(const double* rij)
{
	if(nVariables != 6) 
	{
		free();
		*this = Derivatives(maxOrder, 6);
	}
	if(maxOrder>0) computedRij2_6(rij);
	if(maxOrder>1) computed2Rij2_6();
	if(maxOrder>2) computed3Rij2_6();
	if(maxOrder>3) computed4Rij2_6();
	value = 0;
	for(size_t l=0;l<3;l++) value += rij[l]*rij[l];
}
void Derivatives::build9VFrom6V(int lm, Derivatives& d6)
{
	if(d6.nVariables != 6) 
		throw std::invalid_argument("ERROR: Error in Derivatives:::build9VFrom6V.\n");
	if(nVariables != 9) 
	{
		free();
		*this = Derivatives(maxOrder, 9);
	}
	if(df) build9From6(lm, d6.df, df);
	if(d2f) build9From6(lm, d6.d2f, d2f);
	if(d3f) build9From6(lm, d6.d3f, d3f);
	if(d4f) build9From6(lm, d6.d4f, d4f);
}
void Derivatives::computednR2_9(int lm, const double* r)
{
	Derivatives d6;
	d6.computednRij2_6(r);
	build9VFrom6V(lm, d6);
}
void Derivatives::computednR2(int lm, const double* r)
{
	computednR2_9(lm,r);
}
Derivatives::Derivatives(int mOrder, int lm, const double* r): Derivatives(mOrder, 9)
{
	computednR2(lm,  r);
}
// derivatives of cos theatijk
void Derivatives::computecosijk(const double* rij, const double* rik)
{
	// derivatives of rij^2
	Derivatives dRij2(maxOrder, 0, rij);

	// derivatives of rik^2
	Derivatives dRik2(maxOrder, 1, rik);

	// derivatives of (rij^2*rik^2)
	Derivatives dRij2Rik2 = dRij2*dRik2;
	dRij2.free();
	dRik2.free();
	Derivatives dRij2Rik2m2;
	// derivatives of (rij^2*rik^2)^-2
	dRij2Rik2m2 = dRij2Rik2.getdnFzeta(-2.0);
	dRij2Rik2.free();

	// derivatives of  Rij dot Rik 
	Derivatives dRijRik(maxOrder, rij, rik);
	// derivatives of Rij dot Rik *(rij^2*rik^2)^-2
	*this = dRijRik*dRij2Rik2m2;
}
// derivatives of (1+lambda cos theatijk)^zeta
void Derivatives::computecosijk(const double* rij, const double* rik, double zeta, double lambda)
{
	Derivatives dncos(maxOrder, nVariables);
	// dnCos
	dncos.computecosijk (rij, rik);
	//F = lambda/2 cos + lambda/2 cos
	Derivatives F = dncos.computeSum(lambda/2,lambda/2,dncos);
	//F = 1+ lambda/2 cos + lambda/2 cos
	F.value += 1.0;
	Derivatives dRij2Rik2m2;
	// (1+lambda cos)^zeta
	F.computednFzeta(F,zeta);
}
// compute drivative of fc(u) with u = rij (lm=0) or rik (lm=1) or rijk (lm=2)
void Derivatives::computednfc(const CutoffFunction& cf, int lm, const double* r)
{
	// derivative of r2
	Derivatives r2(maxOrder, lm,r);
        // derivatives of (r^2)^1/2
	Derivatives u(maxOrder, nVariables);
        u.computednFzeta(r2, 0.5);
        double sqrtr2 = u.value;

	double* dnf = NULL;
	if(maxOrder>0)dnf = new double[maxOrder];
	for(int i=0;i<maxOrder;i++) dnf[i] = cf.dnf(sqrtr2,i);

	computednfu(dnf, u);
	if(dnf) delete [] dnf;
}
// compute drivative of fc(rij) * fc(ijk)
void Derivatives::computednfc(const CutoffFunction& cf, const double* rij, const double* rik)
{
	Derivatives fcij(maxOrder, nVariables);
	fcij.computednfc(cf, 0, rij);
	Derivatives fcik(maxOrder, nVariables);
	fcik.computednfc(cf, 0, rik);
	*this = fcij*fcik;
}
// compute drivative of fc(rij) * fc(rjk) *fc(rjk)
void Derivatives::computednfc(const CutoffFunction& cf, const double* rij, const double* rik, const double* rjk)
{
	Derivatives fcij(maxOrder, nVariables);
	fcij.computednfc(cf, 0, rij);
	Derivatives fcik(maxOrder, nVariables);
	fcik.computednfc(cf, 1, rik);
	Derivatives fcjk(maxOrder, nVariables);
	fcjk.computednfc(cf, 2, rjk);
	*this = fcij*fcik*fcjk;
}
// compute drivative of aij * Rij^2 + aik Rik^2
void Derivatives::computednRij2pRik2(double aij, double aik, const double* rij, const double* rik)
{
	Derivatives rij2(maxOrder, 0,rij);
	Derivatives rik2(maxOrder, 1,rik);
	*this = rij2.computeSum(aij, aik, rik2);
}
// compute drivative of exp(-eta*(Rij^2 + Rik^2)
void Derivatives:: computednexpmetaRij2pRik2(double eta, const double* rij, const double* rik)
{
	Derivatives u(maxOrder, nVariables);
	u.computednRij2pRik2(-eta, -eta , rij, rik);
	computednexpu(u);
}
// compute drivative of aij * Rij^2 + aik Rik^2 + ajk Rjk^2
void Derivatives::computednRij2pRik2pRjk2(double aij, double aik, double ajk, const double* rij, const double* rik, const double* rjk)
{
	Derivatives rij2(maxOrder, 0,rij);
	Derivatives rik2(maxOrder, 1,rik);
	Derivatives rjk2(maxOrder, 2,rjk);
	*this = rij2.computeSum(aij, aik, rik2);
	*this = computeSum(1.0, ajk, rjk2);
}
// compute drivative of exp(-eta*(Rij^2 + Rik^2 + Rijk^2)
void Derivatives:: computednexpmetaRij2pRik2pRjk2(double eta, const double* rij, const double* rik, const double* rjk)
{
	Derivatives u(maxOrder, nVariables);
	u.computednRij2pRik2pRjk2(-eta, -eta , -eta, rij, rik, rjk);
	computednexpu(u);
}
// compute drivative of exp(-eta*(R^2)
void Derivatives:: computednexpmetaR2(int lm, double eta, const double* r)
{
	Derivatives r2(maxOrder, lm,r);
	r2 *= -eta/2;
	computednexpu(r2);
}
// (r-rs)^2 = r`2 - 2 rs r + rs^2
Derivatives::Derivatives(int mOrder, int lm, const double* r, double rs): Derivatives(mOrder, 9)
{
	// *this = r2
	Derivatives r2(maxOrder, lm,  r);
	// r2^0.5
	Derivatives r1 = r2.getdnFzeta(0.5);
	*this = r2 + r1*(-2.0*rs);
	*this += rs*rs;
}
// compute drivative of aij * (Rij-rs)^2 + aik (Rik-rs)^2
void Derivatives::computednRij2pRik2(double aij, double aik, const double* rij, const double* rik, double rs)
{
	Derivatives rij2(maxOrder, 0,rij, rs);
	Derivatives rik2(maxOrder, 1,rik, rs);
	*this = rij2.computeSum(aij, aik, rik2);
}
// compute drivative of exp(-eta*((Rij-rs)^2 + (Rik-rs)^2)
void Derivatives:: computednexpmetaRij2pRik2(double eta, const double* rij, const double* rik, double rs)
{
	Derivatives u(maxOrder, nVariables);
	u.computednRij2pRik2(-eta, -eta , rij, rik, rs);
	computednexpu(u);
}
// compute drivative of aij * (Rij-rs)^2 + aik (Rik-rs)^2 + ajk (Rjk-rs)^2
void Derivatives::computednRij2pRik2pRjk2(double aij, double aik, double ajk, const double* rij, const double* rik, const double* rjk, double rs)
{
	Derivatives rij2(maxOrder, 0,rij, rs);
	Derivatives rik2(maxOrder, 1,rik, rs);
	Derivatives rjk2(maxOrder, 2,rjk, rs);
	*this = rij2.computeSum(aij, aik, rik2);
	*this = computeSum(1.0, ajk, rjk2);
}
// compute drivative of exp(-eta*((Rij-rs)^2 + (Rik-rs)^2 + (Rijk-rs)^2)
void Derivatives:: computednexpmetaRij2pRik2pRjk2(double eta, const double* rij, const double* rik, const double* rjk, double rs)
{
	Derivatives u(maxOrder, nVariables);
	u.computednRij2pRik2pRjk2(-eta, -eta , -eta, rij, rik, rjk, rs);
	computednexpu(u);
}
// compute drivative of exp(-eta*((R-rs)^2)
void Derivatives:: computednexpmetaR2(int lm, double eta, const double* r, double rs)
{
	Derivatives r2(maxOrder, lm, r, rs);
	r2 *= -eta/2;
	computednexpu(r2);
}
/*  derivatives of exp(-etat(R-rs)^2 */
void Derivatives::computeG(int lm, double eta, const double* r, double rs, const CutoffFunction& fc)
{
	Derivatives er2(maxOrder, 9);
	er2.computednexpmetaR2(lm, eta, r, rs);
	Derivatives fcr(maxOrder,9);
	fcr.computednfc(fc, lm, r);
	*this = er2*fcr;
}
/*  derivatives of exp(-etat(Rij-rs)^2 */
void Derivatives::computeG(double eta, const double* rij, double rs, const CutoffFunction& fc)
{
	computeG(0, eta,  rij, rs, fc);
}
/*  derivatives of exp(-etat(R-rs)^2 */
Derivatives::Derivatives(int maxOrder, int lm, double eta, const double* r, double rs, const CutoffFunction& fc):Derivatives(maxOrder,9)
{
	computeG(lm, eta,  r, rs, fc);
}
/*  derivatives of exp(-etat(Rij-rs)^2 */
Derivatives::Derivatives(int maxOrder, double eta, const double* rij, double rs, const CutoffFunction& fc):Derivatives(maxOrder,9)
{
	computeG(0, eta,  rij, rs, fc);
}



static void swap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}
//permutation function
static void permutation(int *arr, int start, int end, double val, double*** tab3)
{
    if(start==end)
    {
	tab3[arr[0]][arr[1]][arr[2]] = val;
        return;
    }
    for(int i=start;i<=end;i++)
    {
        //swapping numbers
        swap((arr+i), (arr+start));
        //fixing one first digit
        //and calling permutation on
        //the rest of the digits
        permutation(arr, start+1, end, val, tab3);
        swap((arr+i), (arr+start));
    }
}
//permutation function
static void permutation(int *arr, int start, int end, double val, double**** tab4)
{
    if(start==end)
    {
	tab4[arr[0]][arr[1]][arr[2]][arr[3]] = val;
        return;
    }
    for(int i=start;i<=end;i++)
    {
        //swapping numbers
        swap((arr+i), (arr+start));
        //fixing one first digit
        //and calling permutation on
        //the rest of the digits
        permutation(arr, start+1, end, val, tab4);
        swap((arr+i), (arr+start));
    }
}
static double* new1Dtable(int size)
{
	double* t = new double[size];
	return t;
}
static double* copy1Dtable(int size, double *tc)
{
	double* t = new1Dtable(size);
    	for (int i = 0; i < size; i++) t[i]  = tc[i];
	return t;
}
static void free1Dtable(double* t)
{
	delete[] t;
}
static double** new2Dtable(int size)
{
    double** t = new double*[size];
    for (int l = 0; l < size; l++) t[l]  = new double[size];
    return t;
}
static double** copy2Dtable(int size, double **tc)
{
	double** t = new2Dtable(size);
    	for (int i = 0; i < size; i++) 
    	for (int j = 0; j < size; j++) 
		t[i][j]  = tc[i][j];
	return t;
}
static void free2Dtable(int size, double** t)
{
    for (int l = 0; l < size; l++) delete[] t[l];
    delete[] t;
}
static double*** new3Dtable(int size)
{
    double*** t = new double**[size];
    for (int l = 0; l < size; l++) 
		t[l] = new double*[size];

    for (int l = 0; l < size; l++) 
    	for (int m = 0; m < size; m++) 
		t[l][m] = new double[size];
    return t;
}
static double*** copy3Dtable(int size, double ***tc)
{
	double*** t = new3Dtable(size);
    	for (int i = 0; i < size; i++) 
    	for (int j = 0; j < size; j++) 
    	for (int k = 0; k < size; k++) 
		t[i][j][k]  = tc[i][j][k];
	return t;
}
static void free3Dtable(int size, double*** t)
{
    for (int l = 0; l < size; l++) 
    	for (int m = 0; m < size; m++) 
		delete [] t[l][m];
    for (int l = 0; l < size; l++) delete[] t[l];
    delete[] t;
}
static double**** new4Dtable(int size)
{
    double**** t = new double***[size];
    for (int l = 0; l < size; l++) 
		t[l] = new double**[size];

    for (int l = 0; l < size; l++) 
    	for (int m = 0; m < size; m++) 
		t[l][m] = new double*[size];

    for (int l = 0; l < size; l++) 
    	for (int m = 0; m < size; m++) 
    		for (int n = 0; n < size; n++) 
		t[l][m][n] = new double[size];
    return t;
}
static double**** copy4Dtable(int size, double ****tc)
{
	double**** t = new4Dtable(size);
    	for (int i = 0; i < size; i++) 
    	for (int j = 0; j < size; j++) 
    	for (int k = 0; k < size; k++) 
    	for (int l = 0; l < size; l++) 
		t[i][j][k][l]  = tc[i][j][k][l];
	return t;
}
static void free4Dtable(int size, double**** t)
{
    for (int l = 0; l < size; l++) 
    	for (int m = 0; m < size; m++) 
    		for (int n = 0; n < size; n++) 
		delete [] t[l][m][n];

    for (int l = 0; l < size; l++) 
    	for (int m = 0; m < size; m++) 
		delete [] t[l][m];

    for (int l = 0; l < size; l++) delete[] t[l];
    delete[] t;
}
static void build9From6ij(double* d6, double* d9)
{
	for(size_t l=0;l<6;l++) d9[l] = d6[l];
	for(size_t l=6;l<9;l++) d9[l] = 0;
}
static void build9From6ik(double* d6, double* d9)
{
	for(size_t l=0;l<3;l++) d9[l] = d6[l];
	for(size_t l=3;l<6;l++) d9[l] = 0;
	for(size_t l=6;l<9;l++) d9[l] = d6[l-3];
}
static void build9From6jk(double* d6, double* d9)
{
	for(size_t l=0;l<3;l++) d9[l] = 0;
	for(size_t l=3;l<9;l++) d9[l] = d6[l-3];
}
static void build9From6ij(double** d6, double** d9)
{
	for(size_t l=0;l<9;l++) for(size_t m=0;m<9;m++) d9[l][m] = 0;
	for(size_t l=0;l<6;l++) for(size_t m=0;m<6;m++) d9[l][m] = d6[l][m];
}
static void build9From6ik(double** d6, double** d9)
{
	for(size_t l=0;l<9;l++) for(size_t m=0;m<9;m++) d9[l][m] = 0;
	for(size_t l=0;l<3;l++) for(size_t m=0;m<3;m++) d9[l][m] = d6[l][m];
	for(size_t l=0;l<3;l++) for(size_t m=6;m<9;m++) d9[l][m] = d9[m][l] = d6[l][m-3];
	for(size_t l=6;l<9;l++) for(size_t m=6;m<9;m++) d9[l][m] = d6[l-3][m-3];
}
static void build9From6jk(double** d6, double** d9)
{
	for(size_t l=0;l<9;l++) for(size_t m=0;m<9;m++) d9[l][m] = 0;
	for(size_t l=3;l<9;l++) for(size_t m=3;m<9;m++) d9[l][m] = d6[l-3][m-3];
}
static void build9From6ij(double*** d6, double*** d9)
{
	for(size_t l=0;l<9;l++) 
		for(size_t m=0;m<9;m++) 
			for(size_t n=0;n<9;n++) 
				d9[l][m][n] = 0;
	for(size_t l=0;l<6;l++) 
		for(size_t m=0;m<6;m++) 
			for(size_t n=0;n<6;n++) 
			d9[l][m][n] = d6[l][m][n];
}
static void build9From6ij(double**** d6, double**** d9)
{
	for(size_t l=0;l<9;l++) 
		for(size_t m=0;m<9;m++) 
			for(size_t n=0;n<9;n++) 
				for(size_t k=0;k<9;k++) 
					d9[l][m][n][k] = 0;
	for(size_t l=0;l<9;l++) 
		for(size_t m=0;m<9;m++) 
			for(size_t n=0;n<9;n++) 
				for(size_t k=0;k<9;k++) 
					d9[l][m][n][k] =  d6[l][m][n][k];
}
static void build9From6ik(double*** d6, double*** d9)
{
	for(int l=0;l<9;l++) 
		for(int m=0;m<9;m++) 
			for(int n=0;n<9;n++) 
				d9[l][m][n] = 0;
	for(int lmin=0;lmin<=3;lmin+=3) 
	for(int l=lmin;l<lmin+3;l++) 
		for(int mmin=0;mmin<=3;mmin+=3) 
		for(int m=mmin;m<mmin+3;m++) 
			for(int nmin=0;nmin<=3;nmin+=3) 
			for(int n=nmin;n<nmin+3;n++) 
				{

					int arr[] = {l,m,n};
					double v =d6[l-lmin][m-mmin][n-nmin];
                                	permutation(arr, 0, 2, v, d9);
				}
}
static void build9From6ik(double**** d6, double**** d9)
{
	for(int l=0;l<9;l++) 
		for(int m=0;m<9;m++) 
			for(int n=0;n<9;n++) 
				for(int k=0;k<9;k++) 
					d9[l][m][n][k] = 0;
	for(int lmin=0;lmin<=3;lmin+=3) 
	for(int l=lmin;l<lmin+3;l++) 
		for(int mmin=0;mmin<=3;mmin+=3) 
		for(int m=mmin;m<mmin+3;m++) 
			for(int nmin=0;nmin<=3;nmin+=3) 
			for(int n=nmin;n<nmin+3;n++) 
				for(int kmin=0;kmin<=3;kmin+=3) 
				for(int k=kmin;k<kmin+3;k++) 
				{

					int arr[] = {l,m,n,k};
					double v =d6[l-lmin][m-mmin][n-nmin][k-kmin];
                                	permutation(arr, 0, 3, v, d9);
				}
}
static void build9From6jk(double*** d6, double*** d9)
{
	for(size_t l=0;l<9;l++) 
		for(size_t m=0;m<9;m++) 
			for(size_t n=0;n<9;n++) 
				d9[l][m][n] = 0;
	for(size_t l=3;l<9;l++) 
		for(size_t m=3;m<9;m++) 
			for(size_t n=3;n<9;n++) 
			d9[l][m][n] = d6[l-3][m-3][n-3];
}
static void build9From6jk(double**** d6, double**** d9)
{
	for(size_t l=0;l<9;l++) 
		for(size_t m=0;m<9;m++) 
			for(size_t n=0;n<9;n++) 
				for(size_t k=0;k<9;k++) 
					d9[l][m][n][k] = 0;
	for(size_t l=3;l<9;l++) 
		for(size_t m=3;m<9;m++) 
			for(size_t n=3;n<9;n++) 
				for(size_t k=3;k<3;k++) 
					d9[l][m][n][k] =  d6[l-3][m-3][n-3][k-3];
}
static void build9From6(int lm,  double* d6, double* d9)
{
	if(lm==0) build9From6ij(d6, d9);
	else if(lm==1) build9From6ik(d6, d9);
	else if(lm==2) build9From6jk(d6, d9);
}
static void build9From6(int lm, double** d6, double** d9)
{
	if(lm==0) build9From6ij(d6, d9);
	else if(lm==1) build9From6ik(d6, d9);
	else if(lm==2) build9From6jk(d6, d9);
}
static void build9From6(int lm, double*** d6, double*** d9)
{
	if(lm==0) build9From6ij(d6, d9);
	else if(lm==1) build9From6ik(d6, d9);
	else if(lm==2) build9From6jk(d6, d9);
}
static void build9From6(int lm, double**** d6, double**** d9)
{
	if(lm==0) build9From6ij(d6, d9);
	else if(lm==1) build9From6ik(d6, d9);
	else if(lm==2) build9From6jk(d6, d9);

}

#endif /* HIGH_DERIVATIVES*/
